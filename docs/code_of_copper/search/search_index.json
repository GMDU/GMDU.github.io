{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>To install the datapack, first download the latest release from Modrinth. You will also need GolemScript, Moxlib, and if you want Regular Expression support, Regex.</p> <p>Put these in the <code>datapacks</code> folder of your world. For more information, see the Minecraft wiki.</p> <p>When you install the datapack, you must leave and rejoin the world (or restart the server) for all effects to properly take place.</p>"},{"location":"#obtaining-a-copper-golem","title":"Obtaining a Copper Golem","text":"<p>Golems are found in airships, which generate naturally throughout your world when you have the datapack installed. Make sure to keep your render distance up, they spawn around 200 blocks in the air!</p> <p>Looking for shadows on the ground is a great way to locate airships. Each airship contains one copper golem, alongside three example programs to help you get started with GolemScript.</p> <p>If you would like to follow along with the datapack and learn the language as you go, stop reading here. </p>"},{"location":"#getting-started-with-golemscript","title":"Getting started with GolemScript","text":"<p>GolemScript is written in Minecraft books, which are applied to the golem to give it a program. See the GolemScript documentation for more information on the language.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"<pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"examples/#fizz-buzz","title":"Fizz Buzz","text":"<pre><code>let i = 0\nloop 100\n  i += 1\n  let fizzbuzz = \"\"\n  if i % 3 == 0\n    fizzbuzz += \"fizz\"\n  end\n  if i % 5 == 0\n    fizzbuzz += \"buzz\"\n  end\n  if fizzbuzz\n    print(fizzbuzz)\n    next\n  end\n  print(i)\nend\n</code></pre>"},{"location":"examples/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<pre><code>let a = 0\nlet b = 1\nprint(a)\nprint(b)\nloop 20\n  let c = a + b\n  a = b\n  b = c\n  print(c)\nend\n</code></pre>"},{"location":"examples/#pathfinding-algorithm","title":"Pathfinding algorithm","text":"<pre><code>let last = [0,0]\n\nfunc check(res, x, z)\n  if getblock(x,-1,z) == res &amp;&amp; last != [x*-1,z*-1]\n    last = [x,z]\n    move(x,0,z)\n    return true\n  end\n  return false\nend\n\nfunc path(res)\n  if check(res, 1, 0)\n    return true\n  end\n  if check(res, -1, 0)\n    return true\n  end\n  if check(res, 0, 1)\n    return true\n  end\n  if check(res, 0, -1)\n    return true\n  end\nend\n\nwhile path(:stone)\nend\n</code></pre>"},{"location":"examples/#two-sum-solution","title":"Two Sum solution","text":"<p>A solution to the leetcode two sum problem. Written by amandin on Discord.</p> <pre><code>func len(array)\n  i = 0\n  loop 100\n    if array[i] == undefined\n      return i\n    end\n    i += 1\n  end\nend\n\nfunc twosum(array, targ)\n  target = targ\n  len = len(array)\n  i = 0\n  loop len\n    j = 0\n    loop len\n      if array[i] + array[j] == target &amp;&amp; i != j\n        return [i, j]\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return []\nend\n\nprint(twosum([2,7,11,15],9))\nprint(twosum([3,2,4],6))\nprint(twosum([3,3],6))\n</code></pre>"},{"location":"stdlib/","title":"Standard Library","text":"<p>Code of Copper supports all builtin functions defined in the GolemScript standard library. It also defines some of its own, which are specific to Code of Copper.  </p>"},{"location":"stdlib/#void-print-any-value","title":"void print ( any value )","text":"<p>Print is defined by the GolemScript standard library, but Code of Copper extends this behaviour by printing all outputs of this function in the chat, to anyone within 16 blocks of the Golem.</p>"},{"location":"stdlib/#void-move-int-x-int-y-int-z","title":"void move ( int x, int y, int z )","text":"<p>Moves the golem <code>x</code> blocks in the x direction, <code>y</code> blocks in the y direction, and <code>z</code> blocks in the z direction. It moves a maximum of one block in each direction per tick. If the golem cannot move at all, it skips this function.</p>"},{"location":"stdlib/#resource-getblock-int-x-int-y-int-z","title":"resource getblock ( int x, int y, int z )","text":"<p>Returns the resource location of the block at <code>x</code>, <code>y</code>, <code>z</code>, relative to the golem.</p>"},{"location":"stdlib/#void-place-resource-block-array-int-x-int-y-int-z","title":"void place ( resource block, array [int x, int y, int z] )","text":"<p>Places a <code>block</code> at <code>x</code>, <code>y</code>, <code>z</code>, relative to the golem. If the golem does not have that block, it does nothing. If the block at that position is not replaceable, it does nothing. If <code>block</code> is a tool, it breaks the block at that position and puts the drop into its inventory.</p>"},{"location":"stdlib/#object-x-int-y-int-z-int-pos","title":"object { x: int, y: int, z: int } pos ()","text":"<p>Returns the <code>x</code>, <code>y</code> and <code>z</code> coordinates of the golem.</p>"},{"location":"stdlib/#array-resource-inventory","title":"array [ resource ] inventory ()","text":"<p>Returns an array of resources, the namespaced IDs of every item in the golem's inventory.</p>"}]}