{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>To install the datapack, first download the latest release from Modrinth. You will also need Moxlib, and if you want Regular Expression support, Regex.</p> <p>Put these in the <code>datapacks</code> folder of your world. For more information, see the Minecraft wiki.</p> <p>When you install the datapack, you must leave and rejoin the world (or restart the server) for all effects to properly take place.</p>"},{"location":"#obtaining-a-copper-golem","title":"Obtaining a Copper Golem","text":"<p>Golems are found in airships, which generate naturally throughout your world when you have the datapack installed. Make sure to keep your render distance up, they spawn around 200 blocks in the air!</p> <p>Looking for shadows on the ground is a great way to locate airships. Each airship contains one copper golem, alongside three example programs to help you get started with GolemScript.</p> <p>If you would like to follow along with the datapack and learn the language as you go, stop reading here. </p>"},{"location":"#getting-started-with-golemscript","title":"Getting started with GolemScript","text":"<p>GolemScript is written in Minecraft books, which are applied to the golem to give it a program. There are many built-in functions, keywords and operators. These are all documented throughout this site.</p> <p>For the basic GolemScript syntax, see syntax. For the various data-types and values you will use, see data types. And for some example programs utilising these features, see examples.</p>"},{"location":"data_types/","title":"Data Types","text":"<p>These are the base data types in GolemScript. They can be assigned to variables, used in expressions, or passed as parameters to functions.</p> <pre><code># Assign to variable\nlet arr = [1, 2, 3, 4]\n\n# Use in expression\n\"a\" + \"b\" + \"c\"\n\n# Pass to function\nmyfunc({id: 'foo', value: 'bar'})\n</code></pre>"},{"location":"data_types/#undefined","title":"Undefined","text":"<p>Undefined is the default value for variables that have not been assigned. Functions without return statements will also return undefined. Indexing a literal that would not return a result also yields undefined.</p>"},{"location":"data_types/#boolean","title":"Boolean","text":"<p>Booleans are written as <code>true</code> and <code>false</code>.</p>"},{"location":"data_types/#integer","title":"Integer","text":"<p>GolemScript currently only supports integers as numerics, no floats or doubles.</p> <p>Integers are represented by the digits 0-9, and have the range of <code>-2,147,483,648 (-2^31)</code> to <code>2,147,483,647 (2^31-1)</code>.</p> Examples of valid Integers<pre><code>17\n-1\n983921\n</code></pre> Examples of invalid Integers<pre><code>fourtytwo\nsixty9\n-2147483650\n</code></pre>"},{"location":"data_types/#string","title":"String","text":"<p>Strings can contain any character, and must start and end with either <code>\"</code> or <code>'</code>, with the closing quote matching the opening quote. Quotes used within a string can be escaped with <code>\\</code>. Consequently, backslashes in a string must themselves be escaped with a backslash.</p> Examples of valid Strings<pre><code>\"Hello, World!\"\n'And then I said \"Hello there!\"'\n\"You've cat to be \\\"kitten!\\\"\"\n</code></pre> Examples of invalid Strings<pre><code>\"Goodbye, Earth?'\n'What's up?'\n\"UTF-8 Contains \\\"3MB\" of characters!\"\n</code></pre> <p>Strings can be indexed with a following index integer, contained in square brackets.</p> Example of a String being indexed<pre><code>\"Hello\"[3] # =&gt; \"l\"\n</code></pre>"},{"location":"data_types/#regex","title":"Regex","text":"<p>Regex describes a pattern for a regular expression, and can be used in the match function. They are written as a regular expression pattern, between two <code>/</code>.</p> <p>For more details on valid regular expressions, see the regex library.</p> Examples of valid Regexes<pre><code>/hello?world/\n/12+3/\n</code></pre>"},{"location":"data_types/#resource","title":"Resource","text":"<p>Resource is a data type exclusive to Code of Copper, and mirrors the internal resource naming of Minecraft. It is defined as a namespace and id, separated by a <code>:</code>. Namespaces and ids follow the same constraints as variable names. Optionally, the namespace can be omitted, at which point it will default to <code>minecraft</code> as the namespace.</p> Examples of valid Resources<pre><code>minecraft:stone\nbot:golem\n:diamond\n</code></pre> <p>Resources can be indexed with either square bracket or dot parameters.</p> Example of Resources being indexed<pre><code>foo:bar.id # =&gt; \"bar\"\n:stone[\"namespace\"] # =&gt; \"minecraft\"\n</code></pre>"},{"location":"data_types/#array","title":"Array","text":"<p>Arrays can contain a list of any data type, separated by commas. The list is enclosed in square brackets. Arrays may span multiple lines.</p> Examples of valid Arrays<pre><code>[1,2,3]\n[\n  \"foo\",\n  :bar,\n  [\"b\", \"a\", \"z\"]\n]\n</code></pre> Examples of invalid Arrays<pre><code>[1, \"foo\"\n[\n  'Testing\",\n  :hello_world\n]\n</code></pre> <p>Arrays can be indexed with a following index integer, contained in square brackets.</p> Example of an Array being indexed<pre><code>[1,2,3][1] # =&gt; 2\n[\"foo\", \"bar\", \"baz\"][i] # i = 2, =&gt; \"baz\"\n</code></pre>"},{"location":"data_types/#object","title":"Object","text":"<p>Objects contain key-value pairs, with the values being any data type. Keys, however, must conform to variable naming.</p> Example of valid Objects<pre><code>{a: 1, b: \"two\"}\n{\n  foo: {id: \"poggers\", colour: \"beige\"},\n  bar: [1, 2, 3]\n}\n</code></pre> Example of invalid Objects<pre><code>{12: \"error\", minecraft:diamond: /mox/}\n{\n  comma: \"missing\"\n  parser: \"error\"\n}\n</code></pre> <p>Objects can be indexed with either square bracket or dot parameters.</p> Example of Objects being indexed<pre><code>{a: \"foo\", b: \"bar\", c: \"baz\"}.b # =&gt; \"bar\"\n{a: \"foo\", b: \"bar\", c: \"baz\"}[\"a\"] # =&gt; \"foo\"\n{a: \"foo\", b: \"bar\", c: \"baz\"}[i] # i = \"c\", =&gt; \"baz\"\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"<pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"examples/#fizz-buzz","title":"Fizz Buzz","text":"<pre><code>let i = 0\nloop 100\n  i += 1\n  let fizzbuzz = \"\"\n  if i % 3 == 0\n    fizzbuzz += \"fizz\"\n  end\n  if i % 5 == 0\n    fizzbuzz += \"buzz\"\n  end\n  if fizzbuzz\n    print(fizzbuzz)\n    next\n  end\n  print(i)\nend\n</code></pre>"},{"location":"examples/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<pre><code>let a = 0\nlet b = 1\nprint(a)\nprint(b)\nloop 20\n  let c = a + b\n  a = b\n  b = c\n  print(c)\nend\n</code></pre>"},{"location":"examples/#pathfinding-algorithm","title":"Pathfinding algorithm","text":"<pre><code>let last = [0,0]\n\nfunc check(res, x, z)\n  if getblock(x,-1,z) == res &amp;&amp; last != [x*-1,z*-1]\n    last = [x,z]\n    move(x,0,z)\n    return true\n  end\n  return false\nend\n\nfunc path(res)\n  if check(res, 1, 0)\n    return true\n  end\n  if check(res, -1, 0)\n    return true\n  end\n  if check(res, 0, 1)\n    return true\n  end\n  if check(res, 0, -1)\n    return true\n  end\nend\n\nwhile path(:stone)\nend\n</code></pre>"},{"location":"keywords/","title":"Keywords","text":""},{"location":"keywords/#assignment","title":"Assignment","text":""},{"location":"keywords/#let","title":"Let","text":"<p><pre><code>let &lt;variable&gt; = &lt;value&gt;\n</code></pre> Assigns <code>value</code> to <code>variable</code>, in the current scope<sup>1</sup>. If <code>variable</code> is already assigned in the current scope, then it throws an error.</p>"},{"location":"keywords/#var","title":"Var","text":"<p><pre><code>var &lt;variable&gt; = &lt;value&gt;\n</code></pre> Assigns <code>value</code> to <code>variable</code>, in the global scope<sup>1</sup>. If <code>variable</code> is already assigned, then it throws an error.</p>"},{"location":"keywords/#const","title":"Const","text":"<p><pre><code>const &lt;variable&gt; = &lt;value&gt;\n</code></pre> Assigns <code>value</code> to <code>variable</code>, in the current scope<sup>1</sup>. If <code>variable</code> is already assigned, then it throws an error. <code>variable</code> cannot be re-assigned by any means.</p>"},{"location":"keywords/#control-flow","title":"Control Flow","text":""},{"location":"keywords/#if","title":"If","text":"<p><pre><code>if &lt;condition&gt;\n  ...\nend\n</code></pre> Executes the code in the given block if <code>condition</code> is truthy.</p>"},{"location":"keywords/#while","title":"While","text":"<p><pre><code>while &lt;condition&gt;\n  ...\nend\n</code></pre> Repeatedly executes the code in the given block while <code>condition</code> is truthy.</p>"},{"location":"keywords/#loop","title":"Loop","text":"<p><pre><code>loop &lt;times&gt;\n  ...\nend\n</code></pre> Repeatedly executes the code in the given block <code>times</code> amount of times.</p>"},{"location":"keywords/#break","title":"Break","text":"<p><pre><code>while true\n  break\nend\n</code></pre> Exits the current loop. If used outside of a while or loop, it throws an error.</p>"},{"location":"keywords/#next","title":"Next","text":"<p><pre><code>while true\n  next\n  print(\"This won't print\")\nend\n</code></pre> Stops executing the code, and goes to the next iteration of the loop. If used outside of a while or loop, it throws an error.</p>"},{"location":"keywords/#functional","title":"Functional","text":""},{"location":"keywords/#function","title":"Function","text":"<p><pre><code>func &lt;name&gt;(&lt;param1&gt;,&lt;param2&gt;...)\n  ...\nend\n</code></pre> Defines a function with the name <code>name</code> and parameters <code>param1</code>, <code>param2</code>... etc. Functions can be called using the function call syntax.</p>"},{"location":"keywords/#return","title":"Return","text":"<p><pre><code>func example()\n  return &lt;value&gt;\n  print(\"This won't print\")\nend\n</code></pre> Sets <code>value</code> as the result of calling the current function, and stops executing that function. If used outside of a function, it throws an error.</p> <ol> <li> <p>A scope begins when you enter a block, and ends when you leave it. When a block is left, variables defined in that scope are removed. Variables defined before a block is entered are also accessible in that block.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"operators/","title":"Operators","text":"<p>Each operator has a precedence value. When an operator is part of an expression, it will bind more tightly to its operands the higher its precedence value. Example<pre><code># Since \"*\" has higher precedence than \"+\",\n# it will bind more tightly to 2 and 3,\n# so this expression is evaluated (1 + (2 * 3))\n1 + 2 * 3\n</code></pre></p>"},{"location":"operators/#precedence-8","title":"Precedence 8","text":""},{"location":"operators/#power","title":"Power (<code>**</code>)","text":"<p>int ** int Returns <code>left</code> to the power of <code>right</code>. Note: Power is left associative.</p>"},{"location":"operators/#precedence-7","title":"Precedence 7","text":""},{"location":"operators/#multiply","title":"Multiply (<code>*</code>)","text":"<p>int * int Returns <code>left</code> multiplied by <code>right</code>.</p>"},{"location":"operators/#divide","title":"Divide (<code>/</code>)","text":"<p>int / int Returns <code>left</code> divided by <code>right</code>.</p>"},{"location":"operators/#modulo","title":"Modulo (<code>%</code>)","text":"<p>int % int Returns the remainder of dividing <code>left</code> by <code>right</code>.</p>"},{"location":"operators/#precedence-6","title":"Precedence 6","text":""},{"location":"operators/#add","title":"Add (<code>+</code>)","text":"<p>int + int Returns <code>left</code> plus <code>right</code>.</p> <p>string + string Returns the concatenated string, <code>left</code> followed by <code>right</code>.</p> <p>array + array Returns the merged array containing all of <code>left</code>'s values followed by all of <code>right</code>'s values.</p> <p>object + object Returns <code>left</code> merged with <code>right</code>, with duplicate keys taking the value from <code>right</code>.</p>"},{"location":"operators/#subtract-","title":"Subtract (<code>-</code>)","text":"<p>int - int Returns <code>left</code> minus <code>right</code>.</p>"},{"location":"operators/#precedence-5","title":"Precedence 5","text":""},{"location":"operators/#left-shift","title":"Left shift (<code>&lt;&lt;</code>)","text":"<p>int &lt;&lt; int Returns <code>left</code>, with all the bits in it shifted left, <code>right</code> amount of times. Equivalent to <code>left * (2 ** right)</code>. See wikipedia for more details.</p> <p>array &lt;&lt; any Returns <code>left</code> with <code>right</code> appended to it. If <code>left</code> is a variable, it mutates it.</p>"},{"location":"operators/#right-shift","title":"Right shift (<code>&gt;&gt;</code>)","text":"<p>int &gt;&gt; int Returns <code>left</code>, with all the bits in it shifted right, <code>right</code> amount of times. Equivalent to <code>left / (2 ** right)</code>. See wikipedia for more details.</p> <p>any &gt;&gt; array Returns <code>right</code> with <code>left</code> prepended to it. If <code>right</code> is a variable, it mutates it.</p>"},{"location":"operators/#precedence-4","title":"Precedence 4","text":""},{"location":"operators/#less-than","title":"Less than (<code>&lt;</code>)","text":"<p>sizeable<sup>1</sup> &lt; sizeable<sup>1</sup> Returns a boolean value, whether size<sup>2</sup> of <code>left</code> is less than size<sup>2</sup> of <code>right</code>.</p>"},{"location":"operators/#greater-than","title":"Greater than (<code>&gt;</code>)","text":"<p>sizeable<sup>1</sup> &gt; sizeable<sup>1</sup> Returns a boolean value, whether size<sup>2</sup> of <code>left</code> is greater than size<sup>2</sup> of <code>right</code>.</p>"},{"location":"operators/#less-than-or-equal","title":"Less than or equal (<code>&lt;=</code>)","text":"<p>sizeable<sup>1</sup> &lt; sizeable<sup>1</sup> Returns a boolean value, whether size<sup>2</sup> of <code>left</code> is less than or equal to size<sup>2</sup> of <code>right</code>.</p>"},{"location":"operators/#greater-than-or-equal","title":"Greater than or equal (<code>&gt;=</code>)","text":"<p>sizeable<sup>1</sup> &gt; sizeable<sup>1</sup> Returns a boolean value, whether size<sup>2</sup> of <code>left</code> is greater than or equal to size<sup>2</sup> of <code>right</code>.</p>"},{"location":"operators/#precedence-3","title":"Precedence 3","text":""},{"location":"operators/#equal","title":"Equal (<code>==</code>)","text":"<p>any == any Returns a boolean value, whether <code>left</code> is equal to <code>right</code>.</p>"},{"location":"operators/#not-equal","title":"Not equal (<code>!=</code>)","text":"<p>any != any Returns a boolean value, whether <code>left</code> is not equal to <code>right</code>.</p>"},{"location":"operators/#precedence-2","title":"Precedence 2","text":""},{"location":"operators/#logical-and-and","title":"Logical and (<code>&amp;&amp;</code>/<code>and</code>)","text":"<p>any &amp;&amp; any If <code>left</code> is truthy<sup>3</sup>, return <code>right</code>. Otherwise, return <code>left</code>.</p>"},{"location":"operators/#logical-or-or","title":"Logical or (<code>||</code>/<code>or</code>)","text":"<p>any || any If <code>left</code> is truthy<sup>3</sup>, return <code>left</code>. Otherwise, return <code>right</code>.</p>"},{"location":"operators/#precedence-1","title":"Precedence 1","text":""},{"location":"operators/#assign","title":"Assign (<code>=</code>)","text":"<p>variable = any Sets the value of <code>left</code> to <code>right</code>.</p>"},{"location":"operators/#operator-assignments-","title":"Operator assignments (<code>+=</code>/<code>-=</code>/<code>*=</code>/<code>/=</code>/<code>%=</code>)","text":"<p>variable &lt;operator&gt;= any Sets the value of <code>left</code> to the result of &lt;operator&gt; evaluated on <code>left</code> and <code>right</code>. Example<pre><code>x = 1\nx += 2 # x == x + 2 == 3\n</code></pre></p> <ol> <li> <p>Any type which has a well defined size<sup>2</sup>.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>The size of an integer is its value The size of a string is its length The size of an array is its length The size of an object is the number of keys\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>A value is truthy if its size<sup>2</sup> is not zero. A resource is always truthy. Undefined is always falsey.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"stdlib/","title":"Standard Library","text":"<p>The standard library is the set of builtin functions, avaliable in every GolemScript program. They are all coded in native MCFunction, and execute within one game tick. (1/20 of a second)</p>"},{"location":"stdlib/#void-print-any-value","title":"void print ( any value )","text":"<p>Outputs <code>value</code> to the game chat of anyone within 16 blocks of the golem.</p>"},{"location":"stdlib/#void-move-int-x-int-y-int-z","title":"void move ( int x, int y, int z )","text":"<p>Moves the golem <code>x</code> blocks in the x direction, <code>y</code> blocks in the y direction, and <code>z</code> blocks in the z direction. It moves a maximum of one block in each direction per tick. If the golem cannot move at all, it skips this function.</p>"},{"location":"stdlib/#resource-getblock-int-x-int-y-int-z","title":"resource getblock ( int x, int y, int z )","text":"<p>Returns the resource location of the block at <code>x</code>, <code>y</code>, <code>z</code>, relative to the golem.</p>"},{"location":"stdlib/#void-place-resource-block-array-int-x-int-y-int-z","title":"void place ( resource block, array [int x, int y, int z] )","text":"<p>Places a <code>block</code> at <code>x</code>, <code>y</code>, <code>z</code>, relative to the golem. If the golem does not have that block, it does nothing. If the block at that position is not replaceable, it does nothing. If <code>block</code> is a tool, it breaks the block at that position and puts the drop into its inventory.</p>"},{"location":"stdlib/#void-sleep-int-time","title":"void sleep ( int time )","text":"<p>Pauses execution for <code>time</code> game ticks. (20 game ticks = 1 second)</p>"},{"location":"stdlib/#int-random-int-min-int-max","title":"int random ( int min, int max )","text":"<p>Returns a random integer between <code>min</code> and <code>max</code>, inclusive.</p>"},{"location":"stdlib/#string-match-regex-pattern-string-target","title":"string match ( regex pattern, string target )","text":"<p>Returns the first substring of <code>string</code> to match <code>pattern</code>. If <code>pattern</code> does not match <code>string</code>, it returns an empty string.</p>"},{"location":"stdlib/#object-x-int-y-int-z-int-pos","title":"object { x: int, y: int, z: int } pos ()","text":"<p>Returns the <code>x</code>, <code>y</code> and <code>z</code> coordinates of the golem.</p>"},{"location":"stdlib/#array-resource-inventory","title":"array [ resource ] inventory ()","text":"<p>Returns an array of resources, the namespaced IDs of every item in the golem's inventory.</p>"},{"location":"stdlib/#int-time","title":"int time ()","text":"<p>Returns the current game time, in ticks. Equivalent to mcfunction: <code>/time query gametime</code></p>"},{"location":"syntax/","title":"Syntax","text":"<p>Code of Copper uses a familiar syntax, hoping to be easy to read and write with.</p>"},{"location":"syntax/#comments","title":"Comments","text":"<p>Any line starting with a <code>#</code> is a commented line. Commented lines are ignored by the interpreter.</p>"},{"location":"syntax/#blocks","title":"Blocks","text":"<p>Blocks in Code of Copper are defined by a keyword, and closed with the keyword end.</p> <p>For example, if statements in Code of Copper look as such:</p> <pre><code>if condition\n  ...\nend\n</code></pre>"},{"location":"syntax/#variables","title":"Variables","text":"<p>Variables are referenced simply by their name, which must contain only alphanumeric characters (0-9,A-z, and _). A variable must not start with a number.</p> Examples of Valid Variables<pre><code>foo_Bar13\nhelloWorld\n_greetings\n</code></pre> Examples of Invalid Variables<pre><code>28Foo_\n&amp;bar\n</code></pre>"},{"location":"syntax/#functions","title":"Functions","text":"<p>Functions can be called using the function name, followed by parentheses containing comma separated arguments. Function names follow the same constraints as variables.</p> <p>For example, here is the move function: <pre><code>move(1, 0, 0)\n</code></pre></p>"},{"location":"syntax/#expressions","title":"Expressions","text":"<p>Expressions can contain literals and operators. Expressions may also be nested using parentheses.</p> <p>Here is an example expression: <pre><code>3 + (5 * 2)\n</code></pre></p>"}]}