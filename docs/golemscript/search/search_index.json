{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>GolemScript is a datapack library that implements a high-level programming language in Minecraft.  </p>"},{"location":"#installation","title":"Installation","text":"<p>If you are using GolemScript as a library, just download the following files. If you just want to run GolemScript, you will also need a runtime. See list of runtimes.</p> <p>To install the datapack, first download the latest release from Modrinth. You will also need Moxlib, and if you want Regular Expression support, Regex.</p> <p>Put these in the <code>datapacks</code> folder of your world. For more information, see the Minecraft wiki.  </p>"},{"location":"#getting-started-with-golemscript","title":"Getting started with GolemScript","text":"<p>For documentation on how to use GolemScript as a library, see the API documentation.  </p> <p>For the basic GolemScript syntax, see syntax. For the various data-types and values you will use, see data types. For documentation on builtin function, see standard library. For the different operators in GolemScript, see operators. For a list of GolemScript keyword, see keywords. For some example programs utilising these features, see examples.  </p>"},{"location":"api/","title":"API","text":"<p>GolemScript is a library for the GolemScript programming language. As such, it doesn't come with a user interface with which to run programs. Instead, it exposes an API that allows other datapacks to run GolemScript programs.  </p> <p>All API functions follow the same conventions. </p> <p>A function is called using <code>function glm:api/module/submodule/function</code>, <code>submodule</code> being optional. A function accepts its arguments and outputs values through a data storage: <code>glm:api/module/submodule function</code>. A function returns (using the <code>return</code> command) a status code based on the outcome of the function. These match http status codes.</p> <p>For example, the function with module <code>parser</code> and function name <code>init</code> is called with <code>function glm:api/parser/init</code>, recieves the argument <code>target</code> through <code>glm:api/parser init.target</code>, outputs <code>error</code> through <code>glm:api/parser init.error</code>, and returns a status code, which can be captured using <code>execute store</code>.  </p>"},{"location":"api/#parser","title":"Parser","text":""},{"location":"api/#init","title":"Init","text":"<p>Parses the given strings, separating them with newlines.  </p> <p>Arguments:</p> <ul> <li><code>target</code> - An array of strings</li> </ul> <p>Output:</p> <ul> <li><code>output</code> - The parsed AST of <code>target</code></li> <li><code>error</code> - The error message, if any</li> </ul> <p>Returns:</p> <ul> <li><code>200</code> - Parsed successfully</li> <li><code>400</code> - Invalid syntax</li> </ul>"},{"location":"api/#interpreter","title":"Interpreter","text":""},{"location":"api/#init_1","title":"Init","text":"<p>Executes one cycle of the given program.  </p> <p>Arguments:</p> <ul> <li><code>stack</code> - An array containing the program stack. Should start as an array containing one item: The parsed AST</li> <li><code>variables</code> - An array containing all defined variables</li> <li><code>functions</code> - An array containing all defined functions</li> <li><code>scope</code> - An integer, the current program scope. Should start at <code>0</code></li> </ul> <p>Output: - <code>error</code> - The error message, if any <code>output</code> - An object, containing the values that should be used as input in the next cycle:</p> <ul> <li><code>stack</code> - The program stack after the cycle. If empty, the program is finished, otherwise, it should be run again next tick  </li> <li><code>variables</code> - An array containing all defined variables  </li> <li><code>functions</code> - An array containing all defined functions  </li> <li><code>scope</code> - An integer, the current program scope  </li> </ul> <p>Returns:</p> <ul> <li><code>200</code> - Program ran successfully (Note: If the interpreter throws a Runtime Error, this is still considered a success, and stderr should be checked)</li> <li><code>400</code> - Invalid inputs given</li> </ul>"},{"location":"api/#function","title":"Function","text":""},{"location":"api/#register","title":"Register","text":"<p>Registers a set of builtin functions</p> <p>Arguments:</p> <ul> <li><code>target</code> - An array of objects containing the data about the registered functions</li> </ul> <p>A registered function consists of:</p> <ul> <li><code>id</code> - Name of the function, used to call it in GolemScript</li> <li><code>name</code> - Name of the function as an array of single characters</li> <li><code>function</code> - Resource location of the mcfunction implementation</li> <li><code>args</code> - Array of types of the arguments the function expects (e.g. <code>[{type: \"integer\"}]</code>), will be used for type-checking which is not yet implemented</li> </ul> <p>Outputs:</p> <ul> <li><code>error</code> - The error message, if any</li> </ul> <p>Returns:</p> <ul> <li><code>200</code> - Successfully registered the functions</li> <li><code>400</code> - Invalid input</li> </ul>"},{"location":"api/#delete","title":"Delete","text":"<p>Deletes a builtin function from the registry</p> <p>Arguments:</p> <ul> <li><code>id</code> - The name of the function to delete</li> </ul> <p>Outputs:</p> <ul> <li><code>error</code> The error message, if any</li> </ul> <p>Returns:</p> <ul> <li><code>200</code> - Successfully deleted function</li> <li><code>404</code> - Could not find the function to delete</li> </ul>"},{"location":"api/#execute","title":"Execute","text":"<p>Execute is not a callable function, but the data given to builtin functions. It is all found in <code>glm:api/interpreter/function execute</code> </p> <p>This is an object that contains:</p> <ul> <li><code>args</code> - Array of arguments the user passed to the function</li> <li><code>metadata</code> - An object containing arbitrary data the can be used to store data over multiple ticks</li> </ul> <p>You can also write to the storage:</p> <ul> <li><code>metadata</code> - The data to store for the next tick</li> <li><code>loop</code> - Whether to call this function again the next tick (used in sleep)</li> <li><code>next</code> - An AST node to evaluate, and then return execution to the function (for example usage, see the implementation of map)</li> <li><code>return</code> - The value to return from the function, if any</li> </ul>"},{"location":"api/#stdio","title":"Stdio","text":"<p>Stdio is not a function that you can call, but a storage that can be read from. The storage is <code>glm:api/interpreter stdio</code>.  </p>"},{"location":"api/#out","title":"Out","text":"<p>Standard output of the program. An array of string literals A string literal is an object containing:</p> <ul> <li><code>type</code> - The string <code>\"literal\"</code>, used internally in the interpreter  </li> <li><code>variant</code> - The string <code>\"string\"</code>, marks this object as a string  </li> <li><code>value</code> - The string's value, as an array of characters (<code>\"hello\"</code> is represented as <code>[\"h\",\"e\",\"l\",\"l\",\"o\"]</code>)  </li> </ul>"},{"location":"api/#error","title":"Error","text":"<p>Array containing all errors the program generated An error is an object containing:</p> <ul> <li><code>type</code> - The string <code>\"literal\"</code>, used internally in the interpreter  </li> <li><code>variant</code> - The string <code>\"error\"</code>, marks this object as an error  </li> <li><code>value</code> - The error message, as a string  </li> </ul>"},{"location":"data_types/","title":"Data Types","text":"<p>These are the base data types in GolemScript. They can be assigned to variables, used in expressions, or passed as parameters to functions.</p> <pre><code># Assign to variable\nlet arr = [1, 2, 3, 4]\n\n# Use in expression\n\"a\" + \"b\" + \"c\"\n\n# Pass to function\nmyfunc({id: 'foo', value: 'bar'})\n</code></pre>"},{"location":"data_types/#undefined","title":"Undefined","text":"<p>Undefined is the default value for variables that have not been assigned. Functions without return statements will also return undefined. Indexing a literal that would not return a result also yields undefined.</p>"},{"location":"data_types/#boolean","title":"Boolean","text":"<p>Booleans are written as <code>true</code> and <code>false</code>.</p>"},{"location":"data_types/#integer","title":"Integer","text":"<p>GolemScript currently only supports integers as numerics, no floats or doubles.</p> <p>Integers are represented by the digits 0-9, and have the range of <code>-2,147,483,648 (-2^31)</code> to <code>2,147,483,647 (2^31-1)</code>.</p> Examples of valid Integers<pre><code>17\n-1\n983921\n</code></pre> Examples of invalid Integers<pre><code>fourtytwo\nsixty9\n-2147483650\n</code></pre>"},{"location":"data_types/#string","title":"String","text":"<p>Strings can contain any character, and must start and end with either <code>\"</code> or <code>'</code>, with the closing quote matching the opening quote. Quotes used within a string can be escaped with <code>\\</code>. Consequently, backslashes in a string must themselves be escaped with a backslash.</p> Examples of valid Strings<pre><code>\"Hello, World!\"\n'And then I said \"Hello there!\"'\n\"You've cat to be \\\"kitten!\\\"\"\n</code></pre> Examples of invalid Strings<pre><code>\"Goodbye, Earth?'\n'What's up?'\n\"UTF-8 Contains \\\"3MB\" of characters!\"\n</code></pre> <p>Strings can be indexed with a following index integer, contained in square brackets.</p> Example of a String being indexed<pre><code>\"Hello\"[3] # =&gt; \"l\"\n</code></pre>"},{"location":"data_types/#regex","title":"Regex","text":"<p>Regex describes a pattern for a regular expression, and can be used in the match function. They are written as a regular expression pattern, between two <code>/</code>.</p> <p>For more details on valid regular expressions, see the regex library.</p> Examples of valid Regexes<pre><code>/hello?world/\n/12+3/\n</code></pre>"},{"location":"data_types/#resource","title":"Resource","text":"<p>Resource is a data type exclusive to GolemScript, and mirrors the internal resource naming of Minecraft. It is defined as a namespace and id, separated by a <code>:</code>. Namespaces and ids follow the same constraints as variable names. Optionally, the namespace can be omitted, at which point it will default to <code>minecraft</code> as the namespace.</p> Examples of valid Resources<pre><code>minecraft:stone\nbot:golem\n:diamond\n</code></pre> <p>Resources can be indexed with either square bracket or dot parameters.</p> Example of Resources being indexed<pre><code>let res1 = foo:bar\nres1.id # =&gt; \"bar\"\n\nlet res2 = :stone\nres2[\"namespace\"] # =&gt; \"minecraft\"\n</code></pre>"},{"location":"data_types/#array","title":"Array","text":"<p>Arrays can contain a list of any data type, separated by commas. The list is enclosed in square brackets. Arrays may span multiple lines.</p> Examples of valid Arrays<pre><code>[1,2,3]\n[\n  \"foo\",\n  :bar,\n  [\"b\", \"a\", \"z\"]\n]\n</code></pre> Examples of invalid Arrays<pre><code>[1, \"foo\"\n[\n  'Testing\",\n  :hello_world\n]\n</code></pre> <p>Arrays can be indexed with a following index integer, contained in square brackets.</p> Example of an Array being indexed<pre><code>let arr1 = [1,2,3]\narr1[1] # =&gt; 2\n\nlet arr2 = [\"foo\", \"bar\", \"baz\"]\nlet i = 2\n\narr2[i] # =&gt; \"baz\"\n</code></pre>"},{"location":"data_types/#object","title":"Object","text":"<p>Objects contain key-value pairs, with the values being any data type. Keys, however, must conform to variable naming.</p> Example of valid Objects<pre><code>{a: 1, b: \"two\"}\n{\n  foo: {id: \"poggers\", colour: \"beige\"},\n  bar: [1, 2, 3]\n}\n</code></pre> Example of invalid Objects<pre><code>{12: \"error\", minecraft:diamond: /mox/}\n{\n  comma: \"missing\"\n  parser: \"error\"\n}\n</code></pre> <p>Objects can be indexed with either square bracket or dot parameters.</p> Example of Objects being indexed<pre><code>let obj = {a: \"foo\", b: \"bar\", c: \"baz\"}\nobj.b # =&gt; \"bar\"\nobj[\"a\"] # =&gt; \"foo\"\n\nlet i = \"c\"\nobj[i] # =&gt; \"baz\"\n</code></pre>"},{"location":"data_types/#proc","title":"Proc","text":"<p>A proc, short for process, is a function value that can be assigned to variables, etc. You can pass it as arguments, just like a data-type, or call it, just like a function. There are several ways to define procs.  </p> <p>You can bind an existing function to a value. <pre><code>let write = -&gt; print # write is a value that refers to the \"print\" builtin function\nwrite(\"Hello, world!\") # Prints \"Hello, world!\"\n\nfunc add(a, b)\n  return a + b\nend\n\nlet sum = -&gt; add # sum refers to the custom function \"add\"\nsum(2,3) # =&gt; 5\n</code></pre></p> <p>You can also define a proc inline. <pre><code># return is implicit here\nlet sum = -&gt; (a,b) a + b # \"sum\" takes two arguments, a and b, and returns `a + b`\nsum(1,2) # 3\n\n# return needed to produce a value\nlet complex_proc = -&gt; (a, b) {\n  do_something(a, b)\n  print(\"Doing stuff...\")\n  return a\n}\ncomplex_proc(\"foo\", 42) # runs all code in the block of \"complex_proc\"\n</code></pre></p>"},{"location":"example_runtime/","title":"GolemScript Example Runtime","text":"<p>This runtime comes built in to the GolemScript datapack, and serves as both an easy way to quickly try out the GolemScript language, and as a point of reference for anyone looking to create their own runtime.</p> <p>It has minimal features, and the code is all commented, to help readers understand how it works.</p>"},{"location":"example_runtime/#api","title":"API","text":""},{"location":"example_runtime/#run","title":"Run","text":"<p><code>glm:runtime/api/run</code></p> <p>This function runs a program from the book in your hand. If you are not holding a book, or the book is empty, it will run the last program you compiled.</p>"},{"location":"example_runtime/#stop","title":"Stop","text":"<p><code>glm:runtime/api/stop</code></p> <p>This function simply stops the current program you are running.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#hello-world","title":"Hello World","text":"<pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"examples/#fizz-buzz","title":"Fizz Buzz","text":"<pre><code>let i = 0\nloop 100\n  i += 1\n  let fizzbuzz = \"\"\n  if i % 3 == 0\n    fizzbuzz += \"fizz\"\n  end\n  if i % 5 == 0\n    fizzbuzz += \"buzz\"\n  end\n  if fizzbuzz\n    print(fizzbuzz)\n    next\n  end\n  print(i)\nend\n</code></pre>"},{"location":"examples/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<pre><code>let a = 0\nlet b = 1\nprint(a)\nprint(b)\nloop 20\n  let c = a + b\n  a = b\n  b = c\n  print(c)\nend\n</code></pre>"},{"location":"examples/#two-sum-solution","title":"Two Sum solution","text":"<p>A solution to the leetcode two sum problem. Written by amandin on Discord.</p> <pre><code>func len(array)\n  i = 0\n  loop 100\n    if array[i] == undefined\n      return i\n    end\n    i += 1\n  end\nend\n\nfunc twosum(array, targ)\n  target = targ\n  len = len(array)\n  i = 0\n  loop len\n    j = 0\n    loop len\n      if array[i] + array[j] == target &amp;&amp; i != j\n        return [i, j]\n      end\n      j += 1\n    end\n    i += 1\n  end\n  return []\nend\n\nprint(twosum([2,7,11,15],9))\nprint(twosum([3,2,4],6))\nprint(twosum([3,3],6))\n</code></pre>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#data-types","title":"Data types","text":"<p>Types that are not data types on their own, but collections of types for the purpose of documentation.</p>"},{"location":"glossary/#enumerable","title":"Enumerable","text":"<p>An enumerable is any type that has a series of sub-elements, and can be indexed. The current types that belong to the enumerable category are:  </p> <ul> <li>string </li> <li>array </li> <li>object </li> </ul>"},{"location":"glossary/#elements","title":"Elements","text":"<p>Different enumerables have different elements over which you can iterate. If a proc is called with element of multiple values, each value is passed as a separate argument.  </p> <p>For strings, each element is a string containing this next character of the string. For arrays, each element is just the next value in the array. For objects, there are two values per element: A string of the key, and the value of the next key-value pair.  </p>"},{"location":"glossary/#character","title":"Character","text":"<p>A character is a string with only one character. If a function takes a character as a parameter, it uses the first character of the string given.</p>"},{"location":"glossary/#sizeable","title":"Sizeable","text":"<p>Any data type that has a well defined size.</p>"},{"location":"glossary/#properties","title":"Properties","text":"<p>Properties of a certain value, which are used internally.</p>"},{"location":"glossary/#size","title":"Size","text":"<p>The numeric quantity of a value. The size of undefined is <code>0</code>. The size of a boolean is <code>1</code>, if true, <code>0</code> if false. The size of an integer is its value. The size of a string is its length. The size of an array is its length. The size of an object is the number of keys.  </p>"},{"location":"glossary/#truthiness","title":"Truthiness","text":"<p>A value is truthy if its size is not zero. A resource is always truthy. Undefined is always falsey (not truthy).  </p>"},{"location":"glossary/#scope","title":"Scope","text":"<p>A scope begins when you enter a block, and ends when you leave it. When a block is left, variables defined in that scope are removed. Variables defined before a block is entered are also accessible in that block. There is also a global scope, which is accessible everywhere in the program. Variables defined in the global scope last the entire program.  </p>"},{"location":"glossary/#runtime","title":"Runtime","text":"<p>A runtime is a datapack that implements a user interface with GolemScript, allowing you to run programs more easily, and without using the GolemScript API.</p>"},{"location":"glossary/#extension","title":"Extension","text":"<p>An extension is a datapack that uses the GolemScript API to add new language features, without imeplementing a full user interface. Extensions are used in conjunction with a runtime.</p>"},{"location":"keywords/","title":"Keywords","text":""},{"location":"keywords/#assignment","title":"Assignment","text":""},{"location":"keywords/#let","title":"Let","text":"<p><pre><code>let &lt;variable&gt; = &lt;value&gt;\n</code></pre> Assigns <code>value</code> to <code>variable</code>, in the current scope. If <code>variable</code> is already assigned in the current scope, then it throws an error.</p>"},{"location":"keywords/#var","title":"Var","text":"<p><pre><code>var &lt;variable&gt; = &lt;value&gt;\n</code></pre> Assigns <code>value</code> to <code>variable</code>, in the global scope. If <code>variable</code> is already assigned, then it throws an error.</p>"},{"location":"keywords/#const","title":"Const","text":"<p><pre><code>const &lt;variable&gt; = &lt;value&gt;\n</code></pre> Assigns <code>value</code> to <code>variable</code>, in the current scope. If <code>variable</code> is already assigned, then it throws an error. <code>variable</code> cannot be re-assigned by any means.</p>"},{"location":"keywords/#control-flow","title":"Control Flow","text":""},{"location":"keywords/#if","title":"If","text":"<p><pre><code>if &lt;condition&gt;\n  ...\nend\n</code></pre> Executes the code in the given block if <code>condition</code> is truthy.</p>"},{"location":"keywords/#while","title":"While","text":"<p><pre><code>while &lt;condition&gt;\n  ...\nend\n</code></pre> Repeatedly executes the code in the given block while <code>condition</code> is truthy.</p>"},{"location":"keywords/#loop","title":"Loop","text":"<p><pre><code>loop &lt;times&gt;\n  ...\nend\n</code></pre> Repeatedly executes the code in the given block <code>times</code> amount of times.</p>"},{"location":"keywords/#break","title":"Break","text":"<p><pre><code>while true\n  break\nend\n</code></pre> Exits the current loop. If used outside of a while or loop, it throws an error.</p>"},{"location":"keywords/#next","title":"Next","text":"<p><pre><code>while true\n  next\n  print(\"This won't print\")\nend\n</code></pre> Stops executing the code, and goes to the next iteration of the loop. If used outside of a while or loop, it throws an error.</p>"},{"location":"keywords/#functional","title":"Functional","text":""},{"location":"keywords/#function","title":"Function","text":"<p><pre><code>func &lt;name&gt;(&lt;param1&gt;,&lt;param2&gt;...)\n  ...\nend\n</code></pre> Defines a function with the name <code>name</code> and parameters <code>param1</code>, <code>param2</code>... etc. Functions can be called using the function call syntax.</p>"},{"location":"keywords/#return","title":"Return","text":"<p><pre><code>func example()\n  return &lt;value&gt;\n  print(\"This won't print\")\nend\n</code></pre> Sets <code>value</code> as the result of calling the current function, and stops executing that function. If used outside of a function, it throws an error.</p>"},{"location":"operators/","title":"Operators","text":"<p>Each operator has a precedence value. When an operator is part of an expression, it will bind more tightly to its operands the higher its precedence value. Example<pre><code># Since \"*\" has higher precedence than \"+\",\n# it will bind more tightly to 2 and 3,\n# so this expression is evaluated (1 + (2 * 3))\n1 + 2 * 3\n</code></pre></p>"},{"location":"operators/#precedence-8","title":"Precedence 8","text":""},{"location":"operators/#power","title":"Power (<code>**</code>)","text":"<p>int ** int Returns <code>left</code> to the power of <code>right</code>. Note: Power is left associative.</p>"},{"location":"operators/#precedence-7","title":"Precedence 7","text":""},{"location":"operators/#multiply","title":"Multiply (<code>*</code>)","text":"<p>int * int Returns <code>left</code> multiplied by <code>right</code>.</p>"},{"location":"operators/#divide","title":"Divide (<code>/</code>)","text":"<p>int / int Returns <code>left</code> divided by <code>right</code>.</p>"},{"location":"operators/#modulo","title":"Modulo (<code>%</code>)","text":"<p>int % int Returns the remainder of dividing <code>left</code> by <code>right</code>.</p>"},{"location":"operators/#precedence-6","title":"Precedence 6","text":""},{"location":"operators/#add","title":"Add (<code>+</code>)","text":"<p>int + int Returns <code>left</code> plus <code>right</code>.</p> <p>string + string Returns the concatenated string, <code>left</code> followed by <code>right</code>.</p> <p>array + array Returns the merged array containing all of <code>left</code>'s values followed by all of <code>right</code>'s values.</p> <p>object + object Returns <code>left</code> merged with <code>right</code>, with duplicate keys taking the value from <code>right</code>.</p>"},{"location":"operators/#subtract-","title":"Subtract (<code>-</code>)","text":"<p>int - int Returns <code>left</code> minus <code>right</code>.</p>"},{"location":"operators/#precedence-5","title":"Precedence 5","text":""},{"location":"operators/#left-shift","title":"Left shift (<code>&lt;&lt;</code>)","text":"<p>int &lt;&lt; int Returns <code>left</code>, with all the bits in it shifted left, <code>right</code> amount of times. Equivalent to <code>left * (2 ** right)</code>. See wikipedia for more details.</p> <p>array &lt;&lt; any Returns <code>left</code> with <code>right</code> appended to it. If <code>left</code> is a variable, it mutates it.</p>"},{"location":"operators/#right-shift","title":"Right shift (<code>&gt;&gt;</code>)","text":"<p>int &gt;&gt; int Returns <code>left</code>, with all the bits in it shifted right, <code>right</code> amount of times. Equivalent to <code>left / (2 ** right)</code>. See wikipedia for more details.</p> <p>any &gt;&gt; array Returns <code>right</code> with <code>left</code> prepended to it. If <code>right</code> is a variable, it mutates it.</p>"},{"location":"operators/#precedence-4","title":"Precedence 4","text":""},{"location":"operators/#less-than","title":"Less than (<code>&lt;</code>)","text":"<p>sizeable &lt; sizeable Returns a boolean value, whether size of <code>left</code> is less than size of <code>right</code>.</p>"},{"location":"operators/#greater-than","title":"Greater than (<code>&gt;</code>)","text":"<p>sizeable &gt; sizeable Returns a boolean value, whether size of <code>left</code> is greater than size of <code>right</code>.</p>"},{"location":"operators/#less-than-or-equal","title":"Less than or equal (<code>&lt;=</code>)","text":"<p>sizeable &lt; sizeable Returns a boolean value, whether size of <code>left</code> is less than or equal to size of <code>right</code>.</p>"},{"location":"operators/#greater-than-or-equal","title":"Greater than or equal (<code>&gt;=</code>)","text":"<p>sizeable &gt; sizeable Returns a boolean value, whether size of <code>left</code> is greater than or equal to size of <code>right</code>.</p>"},{"location":"operators/#three-way-comparison","title":"Three-way comparison (<code>&lt;=&gt;</code>)","text":"<p>sizeable &lt;=&gt; sizeable If size of <code>left</code> is greater than <code>right</code>, it returns an integer of value <code>1</code>. If size of <code>left</code> is lesser than <code>right</code>, it returns an integer of value <code>-1</code>. If the size of both sides match, it returns an integer of value <code>0</code>.</p>"},{"location":"operators/#precedence-3","title":"Precedence 3","text":""},{"location":"operators/#equal","title":"Equal (<code>==</code>)","text":"<p>any == any Returns a boolean value, whether <code>left</code> is equal to <code>right</code>.</p>"},{"location":"operators/#not-equal","title":"Not equal (<code>!=</code>)","text":"<p>any != any Returns a boolean value, whether <code>left</code> is not equal to <code>right</code>.</p>"},{"location":"operators/#precedence-2","title":"Precedence 2","text":""},{"location":"operators/#logical-and-and","title":"Logical and (<code>&amp;&amp;</code>/<code>and</code>)","text":"<p>any &amp;&amp; any If <code>left</code> is truthy, return <code>right</code>. Otherwise, return <code>left</code>.</p>"},{"location":"operators/#logical-or-or","title":"Logical or (<code>||</code>/<code>or</code>)","text":"<p>any || any If <code>left</code> is truthy, return <code>left</code>. Otherwise, return <code>right</code>.</p>"},{"location":"operators/#precedence-1","title":"Precedence 1","text":""},{"location":"operators/#assign","title":"Assign (<code>=</code>)","text":"<p>variable = any Sets the value of <code>left</code> to <code>right</code>.</p>"},{"location":"operators/#operator-assignments-","title":"Operator assignments (<code>+=</code>/<code>-=</code>/<code>*=</code>/<code>/=</code>/<code>%=</code>)","text":"<p>variable &lt;operator&gt;= any Sets the value of <code>left</code> to the result of &lt;operator&gt; evaluated on <code>left</code> and <code>right</code>. Example<pre><code>x = 1\nx += 2 # x == x + 2 == 3\n</code></pre></p>"},{"location":"runtimes/","title":"List of Runtimes and Extensions","text":"<p>Here is a list of runtimes and extensions to GolemScript which are officially recommended by GMDU.</p>"},{"location":"runtimes/#runtimes","title":"Runtimes","text":""},{"location":"runtimes/#golemscript-example-runtime","title":"GolemScript Example Runtime","text":"<p>By GMDU</p> <p>This runtime comes built in to the GolemScript datapack, and serves as both an easy way to quickly try out the GolemScript language, and as a point of reference for anyone looking to create their own runtime.</p> <p>It has minimal features, and the code is all commented, to help readers understand how it works.</p> <p>See the documentation for more information.</p>"},{"location":"runtimes/#code-of-copper","title":"Code of Copper","text":"<p>By GMDU</p> <p>Code of Copper is a datapack that allows users to run GolemScript programs to control a moving Copper Golem. It also supports survival gameplay.</p> <p>See Code of Copper documentation for more information.</p>"},{"location":"syntax/","title":"Syntax","text":"<p>GolemScript uses a familiar syntax, hoping to be easy to read and write with.</p>"},{"location":"syntax/#comments","title":"Comments","text":"<p>Any line starting with a <code>#</code> is a commented line. Commented lines are ignored by the interpreter.</p>"},{"location":"syntax/#blocks","title":"Blocks","text":"<p>Blocks in GolemScript are defined by a keyword, and closed with the keyword end.</p> <p>For example, if statements in GolemScript look as such:</p> <pre><code>if condition\n  ...\nend\n</code></pre>"},{"location":"syntax/#variables","title":"Variables","text":"<p>Variables are referenced simply by their name, which must contain only alphanumeric characters (0-9,A-z, and _). A variable must not start with a number.</p> Examples of Valid Variables<pre><code>foo_Bar13\nhelloWorld\n_greetings\n</code></pre> Examples of Invalid Variables<pre><code>28Foo_\n&amp;bar\n</code></pre>"},{"location":"syntax/#functions","title":"Functions","text":"<p>Functions can be called using the function name, followed by parentheses containing comma separated arguments. Function names follow the same constraints as variables.</p> <p>For example, here is the print function: <pre><code>print(\"Hello!\")\n</code></pre></p>"},{"location":"syntax/#expressions","title":"Expressions","text":"<p>Expressions can contain literals and operators. Expressions may also be nested using parentheses.</p> <p>Here is an example expression: <pre><code>3 + (5 * 2)\n</code></pre></p>"},{"location":"stdlib/","title":"Standard Library","text":"<p>The standard library is the set of builtin functions, avaliable in every GolemScript program. They are all coded in native MCFunction, and execute within one game tick. (1/20 of a second)</p> <p>A builtin function can be called, like any other function, using it's name. Example: <pre><code># This calls the print function\nprint(\"Hello, world!\")\n</code></pre></p> <p>The standard library has been split into modules for documentation purposes. Modules have no effect on how functions are called in the language.  </p> <p>These modules are:  </p> <ul> <li>Maths for mathematical and number-based functions  </li> <li>String for string processing  </li> <li>Enumerable for functions that deal with enumerables </li> <li>Types for converting between different data types </li> <li>Misc for other functions that don't fit into the above categories  </li> </ul>"},{"location":"stdlib/enumerable/","title":"Enumerable","text":""},{"location":"stdlib/enumerable/#int-len-enumerable-value","title":"int len ( enumerable value )","text":"<p>Returns the length of <code>value</code>. For strings, this is the number of characters. For arrays, this is the number of elements. For objects, this is the number of key-value pairs.  </p>"},{"location":"stdlib/enumerable/#enumerable-delete-enumerable-target-int-string-index","title":"enumerable delete ( enumerable target, int | string index )","text":"<p>Returns a copy of <code>target</code> with the value at <code>target[index]</code> deleted from it. For arrays and strings, this is the nth value, where n is <code>index</code>. For object, this is the value with a key of <code>index</code>.  </p>"},{"location":"stdlib/enumerable/#enumerable-set-enumerable-target-int-string-index-any-value","title":"enumerable set ( enumerable target, int | string index, any value )","text":"<p>Returns a copy of <code>target</code> with the value at <code>target[index]</code> set to <code>value</code>. For arrays and strings, this is the nth value, where n is <code>index</code>. For object, this is the value with a key of <code>index</code>.  </p>"},{"location":"stdlib/enumerable/#int-index-string-array-target-string-any-element","title":"int index ( string | array target, string | any element )","text":"<p>If <code>target</code> is an array, it returns the index of the first occurence of <code>element</code> in <code>target</code>. If <code>target</code> is a string, it returns the index of the first character of the first substring to match <code>element</code>.</p> <p>If <code>target</code> does not contain <code>element</code>, it returns <code>-1</code>.</p>"},{"location":"stdlib/enumerable/#bool-contains-string-array-target-string-any-element","title":"bool contains? ( string | array target, string | any element )","text":"<p>Returns whether <code>target</code> contains <code>element</code>.</p>"},{"location":"stdlib/enumerable/#bool-any-enumerable-target-proc-predicate","title":"bool any ( enumerable target, proc predicate )","text":"<p>Returns whether <code>predicate</code>, when called on all elements of <code>target</code> separately, returns a truthy value at least once.</p>"},{"location":"stdlib/enumerable/#bool-every-enumerable-target-proc-predicate","title":"bool every ( enumerable target, proc predicate )","text":"<p>Returns whether <code>predicate</code>, when called on all elements of <code>target</code> separately, returns a truthy value every time.</p>"},{"location":"stdlib/enumerable/#string-array-reverse-string-array-target","title":"string | array reverse ( string | array target )","text":"<p>Returns a new string or array, where all elements are in reverse order to <code>target</code>.</p>"},{"location":"stdlib/enumerable/#string-array-slice-string-array-target-int-offset-int-count","title":"string | array slice ( string | array target, int offset, int count)","text":"<p>Returns <code>count</code> amount of elements, starting from position <code>offset</code>. If <code>count</code> is not specified, it returns all objects starting from position <code>offset</code>.</p>"},{"location":"stdlib/enumerable/#array-flat-array-target-int-depth-1","title":"array flat ( array target, int depth = 1 )","text":"<p>Recursively collapses child array elements in <code>target</code> in to the output, to a depth of <code>depth</code>.  </p>"},{"location":"stdlib/enumerable/#array-map-enumerable-target-proc-proc","title":"array map ( enumerable target, proc proc )","text":"<p>Calls <code>proc</code> for each element in <code>target</code>. Returns an array of all the return values of <code>proc</code>.  </p>"},{"location":"stdlib/enumerable/#array-sort-array-target-proc-proc","title":"array sort ( array target, proc proc )","text":"<p>Sorts the elements of <code>target</code>, based on the return value of <code>proc</code>, given the compare value as <code>arg\u00a00</code>, and the pivot as <code>arg\u00a01</code>.</p> <p>The proc should return a negative or zero number if <code>arg\u00a00</code> is to follow <code>arg\u00a01</code>, or a positive number if <code>arg\u00a01</code> is to follow <code>arg\u00a00</code>.</p> <p>This can easily be accomplished with the &lt;=&gt; operator.</p> <p>If <code>proc</code> is unset, sort will default to sorting by value in ascending order.</p>"},{"location":"stdlib/enumerable/#enumerable-filter-enumerable-target-proc-predicate","title":"enumerable filter ( enumerable target, proc predicate )","text":"<p>Returns <code>target</code>, with only the elements for which <code>predicate</code>, when called with that element, returns a truthy value.  </p>"},{"location":"stdlib/enumerable/#any-find-enumerable-target-proc-predicate","title":"any find ( enumerable target, proc predicate )","text":"<p>Returns the first element of <code>target</code> for which <code>predicate</code>, when called with that element, returns a truthy value. If <code>target</code> is an object, it returns the value of the key-value pair for with <code>predicate</code> returns truthy.</p>"},{"location":"stdlib/enumerable/#any-reduce-enumerable-target-any-value-proc-proc","title":"any reduce ( enumerable target, any value, proc proc )","text":"<p>Reduces an enumerable into a single value. Calls <code>proc</code> with the next element of <code>target</code> and the previous return value of <code>proc</code>, or <code>value</code> to begin with. Returns the last return value of <code>proc</code>.</p>"},{"location":"stdlib/enumerable/#array-shuffle-array-target","title":"array shuffle ( array target )","text":"<p>Returns a new array containing the elements of <code>target</code>, in a random order.</p>"},{"location":"stdlib/maths/","title":"Maths","text":""},{"location":"stdlib/maths/#int-random-int-min-int-max","title":"int random ( int min, int max )","text":"<p>Returns a random integer between <code>min</code> and <code>max</code>, inclusive.</p>"},{"location":"stdlib/maths/#int-abs-int-value","title":"int abs ( int value )","text":"<p>Returns the absolute value of <code>value</code>. If <code>value</code> is positive, return <code>value</code>. If <code>value</code> is negative, return <code>-value</code>.  </p>"},{"location":"stdlib/maths/#int-sign-int-value","title":"int sign ( int value )","text":"<p>Returns the sign of <code>value</code>. If <code>value</code> is positive, return <code>1</code>. If <code>value</code> is negative, return <code>-1</code>. If <code>value</code> is zero, return <code>0</code>.  </p>"},{"location":"stdlib/maths/#int-min-int-a-int-b","title":"int min ( int a, int b )","text":"<p>If <code>b</code> is less than <code>a</code>, return <code>b</code>. Otherwise, return <code>a</code>.  </p>"},{"location":"stdlib/maths/#int-max-int-a-int-b","title":"int max ( int a, int b )","text":"<p>If <code>b</code> is greater than <code>a</code>, return <code>b</code>. Otherwise, return <code>a</code>.  </p>"},{"location":"stdlib/misc/","title":"Misc","text":""},{"location":"stdlib/misc/#void-print-any-value","title":"void print ( any value )","text":"<p>Converts <code>value</code> to a stirng, and writes it to stdout.</p>"},{"location":"stdlib/misc/#void-sleep-int-time","title":"void sleep ( int time )","text":"<p>Pauses execution for <code>time</code> game ticks. (20 game ticks = 1 second)</p>"},{"location":"stdlib/misc/#int-time","title":"int time ()","text":"<p>Returns the current game time, in ticks. Equivalent to mcfunction: <code>/time query gametime</code></p>"},{"location":"stdlib/misc/#any-call-string-name-array-args","title":"any call ( string name, array args )","text":"<p>Calls the function named <code>name</code>, passing it <code>args</code>. Returns the return value of the called function. Eg. <code>call(\"random\", [1,10])</code> is equivalent to <code>random(1,10)</code>.  </p>"},{"location":"stdlib/string/","title":"String","text":""},{"location":"stdlib/string/#string-match-regex-pattern-string-target","title":"string match ( regex pattern, string target )","text":"<p>Returns the first substring of <code>string</code> to match <code>pattern</code>. If <code>pattern</code> does not match <code>string</code>, it returns an empty string.</p>"},{"location":"stdlib/string/#string-join-array-target-string-separator","title":"string join ( array target, string separator = \"\" )","text":"<p>Runs str on each element of <code>target</code>, separating each element by <code>separator</code>, and combines all to a single string.  </p>"},{"location":"stdlib/string/#bool-prefix-string-target-string-prefix","title":"bool prefix? ( string target, string prefix )","text":"<p>Returns a boolean value, whether <code>target</code> begins with <code>prefix</code>.</p>"},{"location":"stdlib/string/#bool-suffix-string-target-string-suffix","title":"bool suffix? ( string target, string suffix )","text":"<p>Returns a boolean value, whether <code>target</code> ends with <code>suffix</code>.</p>"},{"location":"stdlib/string/#string-repeat-string-target-int-count","title":"string repeat ( string target, int count )","text":"<p>Returns a string, with <code>target</code> repeated <code>count</code> times.</p>"},{"location":"stdlib/string/#string-upper-string-target","title":"string upper ( string target )","text":"<p>Returns <code>target</code>, converted to upper case.</p>"},{"location":"stdlib/string/#string-lower-string-target","title":"string lower ( string target )","text":"<p>Returns <code>target</code>, converted to lower case.</p>"},{"location":"stdlib/string/#string-trim-string-target","title":"string trim ( string target )","text":"<p>Returns <code>target</code>, with whitespace removed from the left and right.</p>"},{"location":"stdlib/string/#string-ltrim-string-target","title":"string ltrim ( string target )","text":"<p>Returns <code>target</code>, with whitespace removed from the left.</p>"},{"location":"stdlib/string/#string-rtrim-string-target","title":"string rtrim ( string target )","text":"<p>Returns <code>target</code>, with whitespace removed from the right.</p>"},{"location":"stdlib/string/#string-squeeze-string-target-string-characters","title":"string squeeze ( string target, string? characters )","text":"<p>Returns <code>target</code>, with all repeated characters collapsed into one. If <code>characters</code> is provided, it only collapses repeated characters contained in <code>characters</code>.</p>"},{"location":"stdlib/string/#string-replace-string-target-string-match-string-substitute-int-count-1","title":"string replace ( string target, string match, string substitute, int count = -1 )","text":"<p>Returns <code>target</code> but with <code>count</code> instances of substring <code>match</code> replaced with <code>substitute</code>, in left to right order.</p> <p>If <code>count</code> is negative, it will replace all matching substrings.</p>"},{"location":"stdlib/string/#array-split-string-target-string-match","title":"array split ( string target, string match )","text":"<p>Splits <code>target</code> on each instance of substring <code>match</code>.</p>"},{"location":"stdlib/string/#string-lpad-string-target-int-size-string-padding","title":"string lpad ( string target, int size, string padding = \" \" )","text":"<p>If the size of <code>target</code> is less than <code>size</code>, it returns <code>target</code> but padded with characters from <code>padding</code> at the start.</p>"},{"location":"stdlib/string/#string-rpad-string-target-int-size-string-padding","title":"string rpad ( string target, int size, string padding = \" \" )","text":"<p>If the size of <code>target</code> is less than <code>size</code>, it returns <code>target</code> but padded with characters from <code>padding</code> at the end.</p>"},{"location":"stdlib/types/","title":"Types","text":""},{"location":"stdlib/types/#string-typeof-any-value","title":"string typeof ( any value )","text":"<p>Returns the name of the data type of <code>value</code>. Example: <pre><code>typeof(1) # integer\ntypeof(/hi/) # regex\ntypeof(true) # boolean\n</code></pre></p>"},{"location":"stdlib/types/#int-int-any-value","title":"int int ( any value )","text":"<p>Converts <code>value</code> into an integer. If it fails, it returns zero. If <code>value</code> is not a type that is convertable into an intger, it throws an error.    </p>"},{"location":"stdlib/types/#string-str-any-target","title":"string str ( any target )","text":"<p>Returns a string representation of <code>target</code>, formatted the same way as print.</p>"},{"location":"stdlib/types/#object-obj-array-target","title":"object obj ( array target )","text":"<p>Returns an object with key-value pairs drawn from child arrays in <code>target</code>.</p> <p>Eg. <code>[['a', 1], ['b', 2]]</code> returns as <code>{a: 1, b: 2}</code>.</p>"},{"location":"stdlib/types/#array-arr-enumarable-target","title":"array arr ( enumarable target )","text":"<p>Returns an array containing the elements of <code>target</code>. If the elements are multiple values, it wraps the values of each element in a sub-array.</p>"},{"location":"stdlib/types/#int-ascii-char-char","title":"int ascii ( char char )","text":"<p>Returns the ASCII code of the first character of <code>char</code>.  </p>"},{"location":"stdlib/types/#char-char-int-code","title":"char char ( int code )","text":"<p>Returns the character with the ASCII code matching <code>code</code>.</p>"}]}