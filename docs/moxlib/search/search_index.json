{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#a-general-purpose-datapack-library","title":"A General Purpose Datapack Library","text":"<p>Moxlib is an ever-expanding, extensive utility library aimed on improving the experience for datapack creators.</p> <p>Moxlib largely follows a standard API pattern, with the exception of a couple specialised functions and modules.</p> <p>The different functions are grouped into modules, specific to the tasks they perform.</p> <p>Moxlib is licensed under the GNU LGPL, meaning you are free to use it in your own Datapacks, themselves under any license, but any changes you make to Moxlib must be released under the terms of the LGPL. See LICENSE.md for full license.</p>"},{"location":"setup/","title":"Getting Started","text":""},{"location":"setup/#downloading-moxlib","title":"Downloading Moxlib","text":"<p> Download Moxlib  Download Moxlib Exp (Optional)</p> <p> Experimental Features</p> <p>Some functions and modules require experimental features, which will cause a prompt on loading the world. As such, Moxlib makes these features optional, by keeping them in a separate datapack, Moxlib Exp.</p> <p>If a function, or module, is marked with  Experimental, that means it requires Moxlib Exp.</p>"},{"location":"setup/#installing-moxlib","title":"Installing Moxlib","text":"<p>You can install datapacks by placing their <code>.zip</code> files in the <code>datapacks/</code> directory of your Minecraft world.</p> <p>In Single player, you can find the world's folder by pressing <code>Edit</code> on your selected world, then <code>Open World Folder</code>.</p> <p>On a server, install them into the <code>datapacks/</code> directory of your primary world folder (usually <code>world/</code>).</p>"},{"location":"modules/dimension/","title":"Dimension","text":""},{"location":"modules/dimension/#a-void-dimension-for-storing-blocks","title":"A void dimension for storing blocks","text":"Experimental <p>This module is Experimental, and requires Moxlib Exp. See Getting Started for more information.</p> Information Type Dimension Namespace <code>moxlib:api/data/collect</code> Versions 1.18+ <p>Moxlib provides a void dimension, useful for functions that require manipulation of temporary or permanent blocks.</p> <p>The dimension can be accessed at <code>moxlib:state</code>, and the chunk at 0 0 is force-loaded.</p>"},{"location":"modules/dimension/#conventions","title":"Conventions","text":"<p>Below Y 32 is reserved for permanent blocks. These are blocks that need to be accessed multiple times, outside of a single tick.</p> <p>Y 32 and above is for temporary blocks, and blocks placed there should be removed promptly after use.</p>"},{"location":"modules/dimension/#table-of-reserved-co-ordinates","title":"Table of Reserved Co-ordinates","text":"<p>If you intend on using this dimension, please do not use a reserved coordinate, as that could break compatibility with other packs.</p> <p>If you use Moxlib, and would like to reserve a permanent block coordinate(s) for your pack, open an issue or pull request asking for a reservation for the table below.</p> Coordinates Pack reserving Used for <code>5 0 5</code> to <code>5 0 10</code> Moxlib Internal"},{"location":"modules/data/","title":"Data","text":"<p>Minecraft provides a very limited interface for working with NBT data, through the <code>/data</code> and <code>/execute</code> commands.</p> <p>Hard coding a key/value pair is easy with these commands, but dynamic key/value pairs are impossible. The key always has to be hardcoded, it cannot be set from another data source. Values, however, can be dynamically set.</p> <p>Key/value pairs are incredibly useful, however, and as such, Moxlib provides a way to achieve the same results, but with an array of nbt objects. As long as the objects in the array all have the same key as an identifier, the value field can then be compared, and be used to retrieve the rest of the data in the object.</p> <p>The functions Set, Get and Collect provide ways to create and use key/value pairs dynamically.</p> <p>Recursive Functions</p> <p>The Data module uses recursive functions to iterate through arrays of data. Depending on the size of the array, this can rack up quite a large command count.</p> <p>Make sure to keep an eye on how many commands execute from a given input, and consider upping <code>maxCommandChainLength</code>.</p> Resetting the Lock <p>In rare cases, Minecraft can try to run a function before another has finished, which can cause issues when both functions modify the same data, resulting in an invalid outcome for one of the functions.</p> <p>As such, a lock value is set when a function is first run, and removed when it has completed. Whilst this lock value is set, other functions (within the same module) cannot be run.</p> <p>If a function failed to finish properly, it's possible that this lock can be stuck on. Moxlib schedules a function to turn it off after a tick, as a pre-caution, but if this were to fail as well, then the lock could be stuck permanently on.</p> <p>As such, the function <code>moxlib:api/data/reset</code> exists to remove this lock. Use only in cases of a stuck lock.</p>"},{"location":"modules/data/collect/","title":"Collect","text":"Information Type Data Function Namespace <code>moxlib:api/data/collect</code> Versions 1.15+"},{"location":"modules/data/collect/#overview","title":"Overview","text":"<p>Collects Objects in <code>target</code> based on whether they Compare with <code>key</code>. If they do, they are returned in <code>output.match</code>. Otherwise, they are returned in <code>output.remain</code>.</p> <p>Example</p> <p>In this example, <code>key</code> is set to <code>{id:1}</code>, meaning any Object containing an <code>id</code> of <code>1</code> will be returned in <code>output.match</code>.</p> <p><pre><code>data modify storage moxlib:api/data/collect target set value [{id:1,a:1},{id:1,b:1},{id:2,c:1}]\ndata modify storage moxlib:api/data/collect key set value {id:1}\nfunction moxlib:api/data/collect\n</code></pre> Contents of storage moxlib:api/data/collect<pre><code>{\n  output: {\n    match: [{id:1,a:1},{id:1,b:1}],\n    remain: [{id:2,c:1}]\n  }\n  success: true\n}\n</code></pre></p>"},{"location":"modules/data/collect/#api","title":"API","text":""},{"location":"modules/data/collect/#expects","title":"Expects","text":"<ul> <li>Object Array <code>target</code></li> <li>Object <code>key</code></li> </ul>"},{"location":"modules/data/collect/#returns","title":"Returns","text":"<ul> <li>Object Array <code>output.match</code></li> </ul> <p>Objects matching the given key.</p> <ul> <li>Object Array <code>output.remain</code></li> </ul> <p>Objects not matching the given key.</p> <ul> <li>Boolean <code>success</code></li> </ul> <p>If any match was found, <code>true</code>. Otherwise, <code>false</code>.</p>"},{"location":"modules/data/compare/","title":"Compare","text":"Information Type Data Function Namespace <code>moxlib:api/data/compare</code> Versions 1.15+"},{"location":"modules/data/compare/#overview","title":"Overview","text":"<p>Returns an <code>output</code> of true if <code>target</code> contains all of the same key/value pairings as <code>key</code>.</p> <p>Example</p> <p>In this example, <code>key</code> is set to <code>{id:1b}</code>, which is also contained in <code>target</code>. As such, <code>output</code> returns true. <pre><code>data modify storage moxlib:api/data/compare target set value {id:1b,data:\"Hello\"}\ndata modify storage moxlib:api/data/compare key set value {id:1b}\nfunction moxlib:api/data/compare\n</code></pre> Output of storage moxlib:api/data/compare<pre><code>{\n  output: true,\n  success: true\n}\n</code></pre></p>"},{"location":"modules/data/compare/#api","title":"API","text":""},{"location":"modules/data/compare/#expects","title":"Expects","text":"<ul> <li>Object <code>target</code></li> <li>Object <code>key</code></li> </ul>"},{"location":"modules/data/compare/#returns","title":"Returns","text":"<ul> <li>Boolean <code>output</code></li> </ul> <p>If <code>target</code> contains <code>key</code>, <code>true</code>. Otherwise, <code>false</code>.</p> <ul> <li>Boolean <code>success</code></li> </ul> <p>If Comparison ran successfully, <code>true</code>. Otherwise, <code>false</code>.</p>"},{"location":"modules/data/get/","title":"Get","text":"Information Type Data Function Namespace <code>moxlib:api/data/get</code> Versions 1.15+"},{"location":"modules/data/get/#overview","title":"Overview","text":"<p>Retrieves the first Object in <code>target</code> to successfully Compare with <code>key</code>.</p> <p>Example</p> <p>In this example, <code>key</code> is set to <code>{id:2}</code>. As such, it returns <code>{id:2,b:1}</code> to <code>output</code>. <pre><code>data modify storage moxlib:api/data/get target set value [{id:1,a:1},{id:2,b:1},{id:3,c:1}]\ndata modify storage moxlib:api/data/get key set value {id:2}\nfunction moxlib:api/data/get\n</code></pre> Output of storage moxlib:api/data/get<pre><code>{\n  output: {id:2,b:1},\n  success: true\n}\n</code></pre></p>"},{"location":"modules/data/get/#api","title":"API","text":""},{"location":"modules/data/get/#expects","title":"Expects:","text":"<ul> <li>Object Array <code>target</code></li> <li>Object <code>key</code></li> </ul>"},{"location":"modules/data/get/#returns","title":"Returns","text":"<ul> <li>Object <code>output</code></li> </ul> <p>The first Object to Compare with <code>key</code>, if any.</p> <ul> <li>Boolean <code>success</code></li> </ul> <p>If an object could be found, <code>true</code>. Otherwise, <code>false</code>.</p>"},{"location":"modules/data/paginate/","title":"Paginate","text":"Information Type Data Function Namespace <code>moxlib:api/data/paginate</code> Versions 1.15+"},{"location":"modules/data/paginate/#overview","title":"Overview","text":"<p>Groups records in <code>target</code> based on the size of <code>count</code>. Returns the grouped records based on the value of <code>page</code>.</p> <p>Use Calculate Pages to calculate the amount of pages <code>target</code> has.</p> <p>Example</p> <p>In this example, there are nine records in <code>target</code>. The amount of records per page, <code>count</code>, is set to 3, and the page number itself, <code>page</code>, is 2. As such, it returns an <code>output</code> of<code>[4,5,6]</code>. <pre><code>data modify storage moxlib:api/data/paginate target set value [1,2,3,4,5,6,7,8,9]\ndata modify storage moxlib:api/data/paginate count set value 3\ndata modify storage moxlib:api/data/paginate page set value 2\nfunction moxlib:api/data/paginate\n</code></pre> Output of storage moxlib:api/data/paginate<pre><code>{\n  output: [4,5,6]\n}\n</code></pre> If <code>page</code> was 1, <code>output</code> would be <code>[1,2,3]</code>, and if it was 3, <code>output</code> would be <code>[7,8,9]</code>.</p> <p>If <code>count</code> was 4, <code>output</code> would be <code>[5,6,7,8]</code>.</p>"},{"location":"modules/data/paginate/#api","title":"API","text":""},{"location":"modules/data/paginate/#expects","title":"Expects","text":"<ul> <li>Array <code>target</code></li> <li>Numeric <code>count</code></li> <li>Numeric <code>page</code></li> </ul>"},{"location":"modules/data/paginate/#returns","title":"Returns","text":"<ul> <li>Array <code>output</code></li> </ul> <p>The given page of <code>target</code>.</p>"},{"location":"modules/data/set/","title":"Set","text":"Information Type Data Function Namespace <code>moxlib:api/data/set</code> Versions 1.15+"},{"location":"modules/data/set/#overview","title":"Overview","text":"<p>If a record in <code>target</code> successfully Compares with <code>key</code>, that record has <code>data</code> merged into it.</p> <p>If no record is found, a new record is created, and appended to <code>target</code>, merging <code>key</code> and <code>data</code> together.</p> <p>The modified <code>target</code> is returned as <code>output</code>.</p> <p>Example</p> <p>In this example, the record in <code>target</code>, <code>{id:2,b:1}</code>, is updated to have a value of <code>{b:2}</code>. <pre><code>data modify storage moxlib:api/data/set target set value [{id:1,a:1},{id:2,b:1},{id:3,c:1}]\ndata modify storage moxlib:api/data/set key set value {id:2}\ndata modify storage moxlib:api/data/set data set value {b:2}\nfunction moxlib:api/data/set\n</code></pre> Output of storage moxlib:api/data/set<pre><code>{\n  output: [{id:1,a:1},{id:2,b:2},{id:3,c:1}],\n  success: true\n}\n</code></pre></p>"},{"location":"modules/data/set/#api","title":"API","text":""},{"location":"modules/data/set/#expects","title":"Expects","text":"<ul> <li>Object Array <code>target</code></li> <li>Object <code>key</code></li> <li>Object <code>data</code></li> </ul>"},{"location":"modules/data/set/#returns","title":"Returns","text":"<ul> <li>Object Array <code>output</code></li> </ul> <p>The same array as <code>target</code>, but containing the new or updated record.</p> <ul> <li>Boolean <code>success</code></li> </ul> <p>If modification was successful, <code>true</code>. Otherwise, <code>false</code>.</p>"},{"location":"modules/helpers/","title":"Helpers","text":"<p>The Helpers module contains helpful functions that didn't warrant being in a module of their own.</p> <p>They are separated into sub-modules, based generally on the functionality they provide.</p> <p>Many of these functions are small time-savers; it isn't hard for a datapack developer to accomplish the features they provide, but it saves time having them already written.</p> Resetting the Lock <p>In rare cases, Minecraft can try to run a function before another has finished, which can cause issues when both functions modify the same data, resulting in an invalid outcome for one of the functions.</p> <p>As such, a lock value is set when a function is first run, and removed when it has completed. Whilst this lock value is set, other functions (within the same module) cannot be run.</p> <p>If a function failed to finish properly, it's possible that this lock can be stuck on. Moxlib schedules a function to turn it off after a tick, as a pre-caution, but if this were to fail as well, then the lock could be stuck permanently on.</p> <p>As such, the function <code>moxlib:api/helpers/reset</code> exists to remove this lock. Use only in cases of a stuck lock.</p>"},{"location":"modules/helpers/block/get/","title":"Get","text":"Information Type Data Function Namespace <code>moxlib:api/helpers/block/get</code> Versions 1.15+ (with compatibility pack)"},{"location":"modules/helpers/block/get/#overview","title":"Overview","text":"<p>Gets the <code>id</code>, as well as other information, on the block at ~ ~ ~.</p> <p>Retrieving the <code>id</code> only works on vanilla blocks.</p> <p>Example</p> <p>In this example, there is an empty chest at <code>37 64 190</code>, the information of which is returned in <code>output</code>. <pre><code>execute positioned 37 64 190 run function moxlib:api/helpers/block/get\n</code></pre> Output of moxlib:api/helpers/block/get<pre><code>{\n  output:{\n    block: \"minecraft:chest\",\n    group: \"a_to_f\",\n    letter: \"c\",\n    data: {\n      id: \"minecraft:chest\",\n      x: 37,\n      y: 64,\n      z: 190,\n      Items: []\n    }\n  }\n}\n</code></pre></p>"},{"location":"modules/helpers/block/get/#api","title":"API","text":""},{"location":"modules/helpers/block/get/#returns","title":"Returns","text":"<ul> <li>String <code>block</code></li> </ul> <p>Namespaced id of the block.</p> <ul> <li>String <code>group</code></li> </ul> <p>Group this block is in, based on the first letter of it's id, without being namespaced.</p> <p>Possible groups are: <code>a_to_f</code>, <code>g_to_l</code>, <code>m_to_r</code>, <code>s_to_z</code>.</p> <ul> <li>String <code>letter</code></li> </ul> <p>First letter of the block's id, without being namespaced.</p> <ul> <li>Object <code>data</code> </li> </ul> <p>Block-data of the block, if present.</p>"},{"location":"modules/helpers/block/to_item/","title":"To Item","text":"Information Type Data Function Namespace <code>moxlib:api/helpers/block/to_item</code> Versions 1.15+"},{"location":"modules/helpers/block/to_item/#overview","title":"Overview","text":"<p>Converts a block's <code>id</code>, to it's item equivalent, if possible.</p> <p>Example</p> <p><pre><code>data modify storage moxlib:api/helpers/block/to_item target set value \"minecraft:redstone_wire\"\nfunction moxlib:api/helpers/block/to_item\n</code></pre> Output of storage moxlib:api/helpers/block/to_item<pre><code>{\n  output: \"minecraft:redstone_dust\"\n}\n</code></pre></p>"},{"location":"modules/helpers/block/to_item/#api","title":"API","text":""},{"location":"modules/helpers/block/to_item/#expects","title":"Expects","text":"<ul> <li>String <code>target</code></li> </ul> <p>A namespaced block id.</p>"},{"location":"modules/helpers/block/to_item/#returns","title":"Returns","text":"<ul> <li>String <code>output</code></li> </ul> <p>Namespaced <code>id</code> of the item equivalent of <code>target</code> block.</p>"},{"location":"modules/helpers/data/calculate_pages/","title":"Calculate Pages","text":"Information Type Data Function Namespace <code>moxlib:api/helpers/data/calculate_pages</code> Versions 1.15+"},{"location":"modules/helpers/data/calculate_pages/#overview","title":"Overview","text":"<p>Calculates the amount of pages <code>target</code> array has, with a page size of <code>count</code>.</p> <p>Meant for use with Paginate.</p> <p>Example</p> <p><pre><code>data modify storage moxlib:api/helpers/data/calculate_pages target set value [1,2,3,4,5,6,7,8,9]\ndata modify storage moxlib:api/helpers/data/calculate_pages count set value 3\nfunction moxlib:api/helpers/data/calculate_pages\n</code></pre> Output of storage moxlib:api/helpers/data/calculate_pages<pre><code>{\n  output: 3\n}\n</code></pre></p>"},{"location":"modules/helpers/data/calculate_pages/#api","title":"API","text":""},{"location":"modules/helpers/data/calculate_pages/#expects","title":"Expects","text":"<ul> <li>Array <code>target</code></li> <li>Numeric <code>count</code></li> </ul>"},{"location":"modules/helpers/data/calculate_pages/#returns","title":"Returns","text":"<ul> <li>Integer <code>output</code></li> </ul> <p>Total amount of pages, for the given <code>target</code>.</p>"},{"location":"modules/helpers/data/type/","title":"Type","text":"Information Type Data Function Namespace <code>moxlib:api/helpers/data/type</code> Versions 1.15+"},{"location":"modules/helpers/data/type/#overview","title":"Overview","text":"<p>Returns the Type of the given data.</p> <p>Example</p> <p><pre><code>data modify storage moxlib:api/helpers/data/type target set value [\"hello\",\"world\"]\nfunction moxlib:api/helpers/data/type\n</code></pre> Output of storage moxlib:api/helpers/data/type<pre><code>{\n  output: \"array\"\n}\n</code></pre></p>"},{"location":"modules/helpers/data/type/#api","title":"API","text":""},{"location":"modules/helpers/data/type/#expects","title":"Expects","text":"<ul> <li>Any <code>target</code></li> </ul>"},{"location":"modules/helpers/data/type/#returns","title":"Returns","text":"<ul> <li>String <code>output</code></li> </ul> target output {a:1,b:2} \"object\" [\"a\",\"b\"] \"array\" \"hello\" \"string\" '{\"text\":\"hello\"}' \"json\"* 12b \"byte\" 132s \"short\" 420 \"integer\" 487l \"long\" 43.48f \"float\" 684.38d \"double\" <p>*JSON input must be a valid Raw JSON Text component to be detected.</p>"},{"location":"modules/helpers/inventory/compact/","title":"Compact","text":"Information Type Data Function Namespace <code>moxlib:api/helpers/inventory/compact</code> Versions 1.15+"},{"location":"modules/helpers/inventory/compact/#overview","title":"Overview","text":"<p>Takes an array of items in the standard inventory format (Inventory, EnderItems, Items etc), and compacts the data, following correct stack sizes and such.</p> <p>Example</p> <p>Inventory of Steve<pre><code>[\n  {id:\"minecraft:dirt\",Slot:5b,Count:38b},\n  {id:\"minecraft:diamond_sword\",Slot:7b,Count:1b},\n  {id:\"minecraft:dirt\",Slot:12b,Count:60b},\n  {id:\"minecraft:diamond_sword\",Slot:16b,Count:1b},\n  {id:\"minecraft:dirt\",Slot:18b,Count:64b}\n]\n</code></pre> <pre><code>data modify storage moxlib:api/helpers/inventory/compact target set from entity Steve Inventory\nfunction moxlib:api/helpers/inventory/compact\n</code></pre> Output of storage moxlib:api/helpers/inventory/compact<pre><code>{\n  output: [\n    {id:\"minecraft:dirt\",Count:64b},\n    {id:\"minecraft:dirt\",Count:64b},\n    {id:\"minecraft:dirt\",Count:34b},\n    {id:\"minecraft:diamond_sword\",Count:1b},\n    {id:\"minecraft:diamond_sword\",Count:1b}\n  ]\n}\n</code></pre></p>"},{"location":"modules/helpers/inventory/compact/#api","title":"API","text":""},{"location":"modules/helpers/inventory/compact/#expects","title":"Expects","text":"<ul> <li>Object Array <code>target</code></li> </ul>"},{"location":"modules/helpers/inventory/compact/#returns","title":"Returns","text":"<ul> <li>Object Array <code>output</code></li> </ul> <p>Inventory data </p>"},{"location":"modules/helpers/inventory/free_slot/","title":"Free Slot","text":"Information Type Entity Function Namespace <code>moxlib:api/helpers/inventory/free_slot</code> Versions 1.15+"},{"location":"modules/helpers/inventory/free_slot/#overview","title":"Overview","text":"<p>Returns the lowest free inventory slot of the executing player.</p> <p>Example</p> <p><pre><code>execute as Steve run function moxlib:api/helpers/inventory/free_slot\n</code></pre> Output of storage moxlib:api/helpers/inventory/free_slot<pre><code>{\n  output: 5b\n}\n</code></pre></p>"},{"location":"modules/helpers/inventory/free_slot/#api","title":"API","text":""},{"location":"modules/helpers/inventory/free_slot/#returns","title":"Returns","text":"<ul> <li>Byte <code>output</code></li> </ul>"},{"location":"modules/helpers/inventory/give/","title":"Give","text":"Information Type Entity Function Namespace <code>moxlib:api/helpers/inventory/give</code> Versions 1.17+"},{"location":"modules/helpers/inventory/give/#overview","title":"Overview","text":"<p>Gives the executing player an item from data.</p> <p>Example</p> <p><pre><code>data modify storage moxlib:api/helpers/inventory/give target set value {id:\"minecraft:dirt\"}\nexecute as Steve run function moxlib:api/helpers/inventory/give\n</code></pre> Steve receives a dirt item.</p>"},{"location":"modules/helpers/inventory/give/#api","title":"API","text":""},{"location":"modules/helpers/inventory/give/#expects","title":"Expects","text":"<ul> <li>Item Object <code>target</code></li> </ul>"},{"location":"modules/helpers/inventory/stack_max/","title":"Stack Max","text":"Information Type Data Function Namespace <code>moxlib:api/helpers/inventory/stack_max</code> Versions 1.17+"},{"location":"modules/helpers/inventory/stack_max/#overview","title":"Overview","text":"<p>Returns the maximum stack size of the given item id.</p> <p>Example</p> <p><pre><code>data modify storage moxlib:api/helpers/inventory/stack_max target set value \"minecraft:ender_pearl\"\nfunction moxlib:api/helpers/inventory/stack_max\n</code></pre> Output of storage moxlib:api/helpers/inventory/stack_max<pre><code>{\n  output: 16b\n}\n</code></pre></p>"},{"location":"modules/helpers/inventory/stack_max/#api","title":"API","text":""},{"location":"modules/helpers/inventory/stack_max/#expects","title":"Expects","text":"<ul> <li>String <code>target</code></li> </ul> <p>A namespaced item id.</p>"},{"location":"modules/helpers/inventory/stack_max/#returns","title":"Returns","text":"<ul> <li>Byte <code>output</code></li> </ul> <p>The maximum stack size of the given item.</p>"},{"location":"modules/helpers/inventory/strip_slots/","title":"Strip Slots","text":"<p><code>moxlib:api/helpers/inventory/strip_slots</code></p> Information Type Data Function Namespace <code>moxlib:api/helpers/inventory/strip_slots</code> Versions 1.15+"},{"location":"modules/helpers/inventory/strip_slots/#overview","title":"Overview","text":"<p>Takes an array of items in the standard inventory format (Inventory, EnderItems, Items etc), and removes any slot data from it. Useful for cleaning up inventory dumps, when Slot info is not needed.</p> <p>Example</p> <p>Inventory of Steve<pre><code>[\n  {id:\"minecraft:dirt\",Slot:5b,Count:38b},\n  {id:\"minecraft:diamond_sword\",Slot:7b,Count:1b},\n  {id:\"minecraft:dirt\",Slot:12b,Count:60b},\n  {id:\"minecraft:diamond_sword\",Slot:16b,Count:1b},\n  {id:\"minecraft:dirt\",Slot:18b,Count:64b}\n]\n</code></pre> <pre><code>data modify storage moxlib:api/helpers/inventory/strip_slots target set from entity Steve Inventory\nfunction moxlib:api/helpers/inventory/strip_slots\n</code></pre> Output of storage moxlib:api/helpers/inventory/strip_slots<pre><code>{\n  output: [\n    {id:\"minecraft:dirt\",Count:38b},\n    {id:\"minecraft:diamond_sword\",Count:1b},\n    {id:\"minecraft:dirt\",Count:60b},\n    {id:\"minecraft:diamond_sword\",Count:1b},\n    {id:\"minecraft:dirt\",Count:64b}\n  ]\n}\n</code></pre></p>"},{"location":"modules/helpers/inventory/strip_slots/#api","title":"API","text":""},{"location":"modules/helpers/inventory/strip_slots/#expects","title":"Expects","text":"<ul> <li>Object Array <code>target</code></li> </ul> <p>Array of item objects.</p>"},{"location":"modules/helpers/inventory/strip_slots/#returns","title":"Returns","text":"<ul> <li>Object Array <code>output</code></li> </ul> <p>Array of item objects, without slot information.</p>"},{"location":"modules/helpers/player/head/","title":"Head","text":"Information Type Entity Function Namespace <code>moxlib:api/helpers/player/head</code> Versions 1.17+"},{"location":"modules/helpers/player/head/#overview","title":"Overview","text":"<p>Gets the executing player's head as an item, and stores it in <code>output</code>.</p> <p>Example</p> <p><pre><code>execute as Steve run function moxlib:api/helpers/player/head\n</code></pre> Output of storage moxlib:api/helpers/player/head<pre><code>{\n  output: {\n    id:\"minecraft:player_head\",\n    tag:{\n      SkullOwner: {\n        Id:[I; &lt;uuid here...&gt;],\n        Properties:{\n          textures:[\n            {\n              Value:\"&lt;base64 texture here...&gt;\",\n              Signature:\"&lt;base64 signature here...&gt;\"\n            }\n          ]\n        },\n        Name: \"Steve\"\n      }\n    },\n    Count:1b\n  }\n}\n</code></pre></p>"},{"location":"modules/helpers/player/head/#api","title":"API","text":""},{"location":"modules/helpers/player/head/#returns","title":"Returns","text":"<ul> <li>Item Object <code>output</code></li> </ul> <p>A player_head item object, with the player's head data. More info.</p>"},{"location":"modules/helpers/player/teleport/","title":"Teleport","text":"Information Type Entity Function Namespace <code>moxlib:api/helpers/player/teleport</code> Versions 1.17+"},{"location":"modules/helpers/player/teleport/#overview","title":"Overview","text":"<p>Teleports the executing player to the given coordinates, within the same dimension.</p> <p>Example</p> <p><pre><code>data modify storage moxlib:api/helpers/player/teleport target set value [0,64,0]\nexecute as Steve run function moxlib:api/helpers/player/teleport\n</code></pre> Steve teleports to 0 64 0.</p>"},{"location":"modules/helpers/player/teleport/#api","title":"API","text":""},{"location":"modules/helpers/player/teleport/#expects","title":"Expects","text":"<ul> <li>Number Array <code>target</code></li> </ul> <p>Array of co-ordinates for the destination.</p>"},{"location":"modules/math/","title":"Math","text":""},{"location":"modules/math/#a-collection-of-useful-math-formulas","title":"A collection of useful math formulas","text":"<p>Moxlib provides some useful math functions in this module.</p> <p>Instead of the usual data API, this module largely uses a scoreboard based API. It is quite similar. The input value will usually be the fake player <code>$target</code>. Output, however, depends on the function.</p> <p>The objective path follows a similar convention to the data path, but using <code>.</code> instead. Eg. <code>moxlib:api/math/random</code> writes to <code>moxlib.api.math.random</code>.</p>"},{"location":"modules/math/math/","title":"Math","text":""},{"location":"modules/math/math/#a-collection-of-useful-math-formulas","title":"A collection of useful math formulas","text":"<p>Moxlib provides some useful math functions in this module.</p> <p>Instead of the usual data API, this module largely uses a scoreboard based API. It is quite similar. The input value will usually be the fake player <code>$target</code>. Output, however, depends on the function.</p> <p>The objective path follows a similar convention to the data path, but using <code>.</code> instead. Eg. <code>moxlib:api/math/random</code> writes to <code>moxlib.api.math.random</code>.</p>"},{"location":"modules/math/math/#api","title":"API","text":""},{"location":"modules/math/math/#random","title":"Random","text":"<p>Generates random numbers.</p> <p>Function: <code>moxlib:api/math/random</code> Objective: <code>moxlib.api.math.random</code> Expects: - <code>$seed</code> -- optional, can set that fake player to be the seed of the number generator</p> <p>Returns: - <code>$rng</code> -- large random number - <code>$rand_n</code> -- random number between 0 and n-1   - Valid numbers are:   [2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 32, 48, 64, 80, 96, 112, 128]</p> <p>Example: <pre><code>/function moxlib:api/math/random\n/scoreboard players get $rand_8 moxlib.api.math.random\n---\n6\n</code></pre></p>"},{"location":"modules/math/math/#constants","title":"Constants","text":"<p>Provides a series of pre-set values in a scoreboard.</p> <p>Function: No function required Objective: <code>moxlib.api.math.constants</code> Expects: No value expected Returns: - <code>$n</code> -- fake player, with value assigned same as it's name   - valid numbers are:   [-1..100, 120..1000 at intervals of 20, 1023..2147483647 2^n-1 and 2^n]</p> <p>Example: <pre><code>/scoreboard players get $2047 moxlib.api.math.constants\n---\n2047\n</code></pre></p>"},{"location":"modules/math/math/#tropical-fish-variant","title":"Tropical Fish Variant","text":"<p>Calculates a tropical fish's different variant values based on it's variant number.</p> <p>Function: <code>moxlib:api/math/misc/fish</code> Objective: <code>moxlib.api.math.misc.fish</code> Expects: - <code>$target</code> -- set this to the fish's variant number Returns: - <code>$size</code> -- size of the fish, either 0 or 1 - <code>$pattern</code> -- pattern of the fish - <code>$base_color</code> -- base color of the fish - <code>$pattern_color</code> -- pattern color of the fish</p> <p>Example: <pre><code>/scoreboard players set $target moxlib.api.math.misc.fish 67764993\n/function moxlib:api/math/misc/fish\n/scoreboard players get $size moxlib.api.math.misc.fish\n/scoreboard players get $pattern moxlib.api.math.misc.fish\n/scoreboard players get $base_color moxlib.api.math.misc.fish\n/scoreboard players get $pattern_color moxlib.api.math.misc.fish\n---\n$size = 1\n$pattern = 3\n$base_color = 10\n$pattern_color = 4\n</code></pre></p>"},{"location":"modules/math/math/#power","title":"Power","text":"<p>Calculates <code>$target</code> to the power of <code>$power</code>. <code>$power</code> is expected to be positive.</p> <p>Function: <code>moxlib:api/math/power</code> Objective: <code>moxlib.api.math.power</code> Expects: - <code>$target</code> -- set this as the target number - <code>$power</code> -- set this as what <code>$target</code> should be to the power of Returns: - <code>$output</code> -- <code>$target</code> put to the power of <code>$power</code></p> <p>Example: <pre><code>/scoreboard players set $target moxlib.api.math.power 5\n/scoreboard players set $power moxlib.api.math.power 2\n/function moxlib:api/math/power\n/scoreboard players get $output moxlib.api.math.power\n---\n$output = 25\n</code></pre></p>"},{"location":"modules/math/math/#array-to-integer","title":"Array to Integer","text":"<p>Turns an array of numbers into a single integer. Perfect for making a virtual calculator, where you need to turn an array of user inputs, into a usable number.</p> <p>Unlike other functions in this module, this function uses data storage, and thus, the standard function API.</p> <p>Function: <code>moxlib:api/math/array_to_integer</code> Expects: - <code>target</code> -- an array of numbers (single digit, 0-9) Returns: - <code>output</code> -- an integer, created from the given numbers</p> <p>Example: <pre><code>/data modify storage moxlib:api/math/array_to_integer target set value [1,9,8,7]\n/function moxlib:api/math/array_to_integer\n/data get storage moxlib:api/math/array_to_integer\n---\n{\n  output: 1987\n}\n</code></pre></p>"},{"location":"modules/math/random/","title":"Random","text":"Information Type Score Function Namespace <code>moxlib:api/math/random</code> Objective <code>moxlib.api.math.random</code> Versions 1.13+"},{"location":"modules/math/random/#overview","title":"Overview","text":"<p>Generates a pseudo-random number. More info.</p> <p>Example</p> <p><pre><code>function moxlib:api/math/random\n</code></pre> Output of scoreboard moxlib.api.math.random<pre><code>$seed = -223524657\n$rng = -949726584\n</code></pre></p>"},{"location":"modules/math/random/#api","title":"API","text":""},{"location":"modules/math/random/#expects","title":"Expects","text":"<ul> <li>Score <code>$seed</code> (optional)</li> </ul> <p>Seed to be used for generating the random number.</p> <ul> <li>Score <code>$iteration</code> (optional)</li> </ul> <p>Seed to be used for generating the random number.</p>"},{"location":"modules/player/player/","title":"Player","text":""},{"location":"modules/player/player/#exposes-helpful-informationabout-players","title":"Exposes helpful Informationabout players","text":"<p>Due to Moxlib's goal of running nothing on tick by default, this module effectively has to be \"enabled\". It has a single function, <code>moxlib:api/player/run</code>, which then powers the following API. In most cases, you will want to run this function, as <code>@a</code>, in your tick function.</p> <p>This function will not work unless it is executed as a player.</p> <pre><code># tick.mcfunction\n/execute as @a run function moxlib:api/player/run\n</code></pre>"},{"location":"modules/player/player/#api","title":"API","text":""},{"location":"modules/player/player/#scoreboard-objectives","title":"Scoreboard Objectives","text":"<p><code>moxlib.api.player.id</code> -- unique player id <code>moxlib.api.player.died</code> -- death count of player <code>moxlib.api.player.killed</code> -- total kill count of player, any entity <code>moxlib.api.player.killed_player</code> -- count of player kills by player <code>moxlib.api.player.hotbar</code> -- current selected slot in the hotbar <code>moxlib.api.player.scroll</code> -- direction the player scrolled in the hotbar - 0 if not scrolled that tick - 1 if scrolled right, -1 if scrolled left - should usually work even when scroll loop occurs (aka. scroll from slot 8 to 0)</p>"},{"location":"modules/player/player/#predicates","title":"Predicates","text":"<p><code>moxlib:api/player/has_died</code> -- true if player died that tick <code>moxlib:api/player/has_killed</code> -- true if player killed anything that tick <code>moxlib:api/player/has_killed_player</code> -- true if player killed another player that tick <code>moxlib:api/player/has_scrolled</code>  -- true if player scrolled that tick</p>"},{"location":"modules/player/player/#function-tags","title":"Function Tags","text":"<p><code>#moxlib:api/player/on_death</code> -- run by the player on death <code>#moxlib:api/player/on_kill</code> -- run by the player on killing an entity <code>#moxlib:api/player/on_player_kill</code> -- run by the player on killing a player <code>#moxlib:api/player/on_scroll</code> -- run by the player on scrolling the hotbar</p>"},{"location":"modules/string/string/","title":"String","text":""},{"location":"modules/string/string/#functions-for-working-with-strings","title":"Functions for working with strings","text":"<p>Moxlib provides a set of functions for working with strings, thanks to the changes made in 23w03a.</p> <p>As such, these functions require snapshot 23w03a+ (1.19.4+) to function.</p>"},{"location":"modules/string/string/#api","title":"API","text":""},{"location":"modules/string/string/#to-array","title":"To Array","text":"<p>Turns a given string into an array of characters.</p> <p>Function: <code>moxlib:api/string/to_array</code> Expects: - <code>target</code> -- any string</p> <p>Returns: - <code>output</code> -- an array of characters in that string, in order</p> <p>Example: <pre><code>/data modify storage moxlib:api/string/to_array target set value \"Hello, World!\"\n/function moxlib:api/string/to_array\n/data get storage moxlib:api/string/to_array\n---\n{\n  output: [\"H\",\"e\",\"l\",\"l\",\"o\",\",\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\",\"!\"]\n}\n</code></pre></p>"},{"location":"modules/string/string/#from-array","title":"From Array","text":"<p>Turns a given array of strings into a single joined string.</p> <p>Experimental: Requires Moxlib Exp.</p> <p>Function: <code>moxlib:api/string/from_array</code> Expects: - <code>target</code> -- an array of strings</p> <p>Returns: - <code>output</code> -- a single string</p> <p>Unfortunately, due to current limitations, this function cannot run in the same tick as it is executed. As such, when it is done, it will call <code>#moxlib:api/string/from_array/finished</code> to allow you to use the output.</p> <p>Example: <pre><code>/data modify storage moxlib:api/string/from_array target set value [\"Hello, \",\"World!\"]\n/function moxlib:api/string/from_array\n\n# After #moxlib:api/string/from_array/finished is called\n/data get storage moxlib:api/string/to_array\n---\n{\n  output: \"Hello, World!\"\n}\n</code></pre></p>"},{"location":"modules/string/string/#reset","title":"Reset","text":"<p>Resets the lock, in the unlikely case it gets stuck.</p> <p>Function: <code>moxlib:api/string/reset</code> Expects: No value expected Returns: No value returned</p>"},{"location":"modules/test/test/","title":"Test","text":""},{"location":"modules/test/test/#functions-for-testing-other-functions","title":"Functions for testing other functions","text":"<p>Moxlib provides a test suite, for verifying a function provides the correct output.</p> <p>The syntax of the test suite is inspired by RSpec.</p> <p>If you have multiple tests you would like to run at once, place them in functions, then add those functions to the tag <code>#moxlib:api/test</code>. Each of the functions must also call <code>moxlib:api/test/perform</code> themselves.</p> <p>When you run <code>moxlib:api/test/start</code>, it will run all the tests at once, and number them.</p> <p>Check <code>moxlib:spec</code> for example tests.</p>"},{"location":"modules/test/test/#api","title":"API","text":""},{"location":"modules/test/test/#perform","title":"Perform","text":"<p>Checks that the <code>receives</code> tag matches the <code>expects</code> tag.</p> <p>A test should first run the function needing to be tested, and set the output of the function into the <code>receives</code> tag.</p> <p>Note The test suite does not follow the same syntax as the other functions.</p> <p>Function: <code>moxlib:api/test/perform</code> Storage: <code>moxlib:test/it</code> Expects: - <code>describes</code> -- the name of the test, as a string - <code>expects</code> -- the expected NBT data - <code>receives</code> -- the data received from the function output Returns: The function will tellraw to the executing player the results.</p> <p>Example: <pre><code>/function example:return_true\n/data modify storage moxlib:test/it describes set value \"always returns true\"\n/data modify storage moxlib:test/it expects set value true\n/data modify storage moxlib:test/it receives set from storage example:return_true output\n/function moxlib:api/test/perform\n---\n*1 Passed: \"always returns true\"*\n</code></pre></p>"},{"location":"modules/test/test/#start","title":"Start","text":"<p>Runs the tests as listed in <code>#moxlib:api/test</code>.</p> <p>Running start with the tag <code>moxlib.dev</code> will run Moxlib's internal tests.</p> <p>Function: <code>moxlib:api/test/start</code> Expects: No value expected Returns: No value returned</p> <p>Example: <pre><code>/function moxlib:api/test/start\n---\n*1 Passed: \"always returns true\"*\n*2 Passed: \"always returns false\"*\n*3 Failed: \"should returns true\"*\n  - Expected: true\n  - Received: false\n</code></pre></p>"},{"location":"modules/tui/tui/","title":"TUI","text":""},{"location":"modules/tui/tui/#data-driven-text-user-interface","title":"Data driven Text User Interface","text":"<p>Moxlib provides a powerful and extensible TUI system.</p> <p>It aims to be as data driven as possible. The TUI is drawn from an array of formatted NBT objects, allowing for all manner of customisations.</p> <p>Over the course of rendering the TUI, the module will call certain callback function tags, which can be used to interpret user selection, or to dynamically change the content of the TUI. See the callbacks section for more details.</p>"},{"location":"modules/tui/tui/#api","title":"API","text":""},{"location":"modules/tui/tui/#render","title":"Render","text":"<p>Calls the <code>#moxlib:api/tui/render/init</code> tag, then <code>#moxlib:api/tui/index</code>. Displays the TUI to the executing player, based on the given input, usually resolved from <code>#moxlib:api/tui/index</code>.</p> <p>Note The TUI system does not follow the same syntax as the other functions.</p> <p>Function: <code>moxlib:api/tui/render</code> Storage: <code>moxlib:tui/page</code> Expects: - <code>title</code>: plain string, title of the TUI menu - <code>template</code>: an array of <code>slot</code> data Slot Data Format:   - <code>text</code>: json string defining the text of the menu option, required   - <code>page</code>: number of page to visit on click   - <code>slot</code>: byte from 0-8, automatically sets <code>trigger</code>, and used to retrieve data on select, recommended   - <code>trigger</code>: json string used to set the trigger, should have empty \"text\" and a \"run_command\" trigger   - <code>bullet</code>: used to override the bullet of the page</p> <p>Optional: - <code>navigation</code>   - <code>previous</code>: number of the previous page   - <code>next</code>: number of the next page - <code>border</code>   - <code>top</code>     - <code>left</code>: plain string to draw top left border corner     - <code>right</code>: plain string to draw top right border corner   - <code>bottom</code>     - <code>left</code>: plain string to draw bottom left border corner     - <code>right</code>: plain string to draw bottom right border corner   - <code>title</code>     - <code>left</code>: plain string to draw before the title     - <code>right</code>: plain string to draw after the title   - <code>vertical</code>: plain string to draw vertical border   - <code>horizontal</code>: plain string to draw vertical border   - <code>width</code>: approximate width of menu, should be no larger than 50   - <code>format</code>: json string to format the border text, should have an empty \"text\" value - <code>bullet</code>:   - <code>text</code>: json string formatting the bullet, or false to not display one   - <code>gap</code>: plain string gap between the border and the bullet</p> <p>Returns: The function will tellraw to the executing player the resulting TUI.</p> <p>Example: <pre><code># pack:index\nexecute as @s[scores={moxlib.tui.page=1}] run function pack:pages/page_1\n---\n# pack:pages/page_1\ndata modify storage moxlib:tui/page title set value \"Page 1\"\ndata modify storage moxlib:tui/page template set value [{slot:0b,text:'{\"text\":\"Option 1\"}'},{slot:1b,text:'{\"text\":\"Option 2\"}'}]\n---\n/scoreboard players set @s moxlib.tui.page 1\n/function moxlib:api/tui/render\n---\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 \u2666 Page 1 \u2666 \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551\n\u2551 [+] Option 1\n\u2551 [+] Option 2\n\u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 \u2666 Page 1 \u2666 \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre></p>"},{"location":"modules/tui/tui/#select","title":"Select","text":"<p>Calls the <code>#moxlib:api/tui/select/init</code> tag, then <code>#moxlib:api/tui/index</code>. Parses the executing player's selection, then renders the next page, if any. Recommended to be run on tick.</p> <p>Function: <code>moxlib:api/tui/select</code> Expects: No value expected Returns: No value returned</p>"},{"location":"modules/tui/tui/#callbacks","title":"Callbacks","text":""},{"location":"modules/tui/tui/#init","title":"Init","text":"<p>Called before <code>select</code> or <code>render</code>. Perfect for setting initial variables.</p> <p>Tag: <code>#moxlib:api/tui/init</code></p>"},{"location":"modules/tui/tui/#index","title":"Index","text":"<p>Called before <code>select</code> or <code>render</code>.</p> <p>Functions called by this tag should read the executing player's <code>moxlib.tui.page</code> score, and configure the <code>moxlib:tui/page</code> data accordingly (see <code>render</code>).</p> <p>Tag: <code>#moxlib:api/tui/index</code></p>"},{"location":"modules/tui/tui/#render-init","title":"Render - Init","text":"<p>Called before <code>render</code> and <code>#moxlib:api/tui/index</code>.</p> <p>Perfect for setting render relevant variables.</p> <p>Tag: <code>#moxlib:api/tui/render/init</code></p>"},{"location":"modules/tui/tui/#render-slot","title":"Render - Slot","text":"<p>Called for each slot in the <code>moxlib:tui/page template</code> array.</p> <p>Exposes the current slot as <code>moxlib:tui/slot current</code>. Perfect for dynamically modifying the rendered data.</p> <p>Tag: <code>#moxlib:api/tui/render/slot</code></p>"},{"location":"modules/tui/tui/#select-init","title":"Select - Init","text":"<p>Called before <code>select</code> and <code>#moxlib:api/tui/index</code>.</p> <p>Perfect for setting select relevant variables.</p> <p>Tag: <code>#moxlib:api/tui/select/init</code></p>"},{"location":"modules/tui/tui/#select-slot","title":"Select - Slot","text":"<p>Called for the slot selected by the player, based on it's slot number.</p> <p>Exposes the selected slot as <code>moxlib:tui/slot current</code>. Perfect for performing certain actions based on the data in the slot.</p> <p>Tag: <code>#moxlib:api/tui/select/slot</code></p>"},{"location":"types/data/","title":"Data Types","text":"<p>The following is a list of types referenced in the Moxlib API. These are not the same as NBT types; they are largely simplified aliases for them instead, for ease of use and understanding.</p>"},{"location":"types/data/#object","title":"Object","text":"<p><code>{a:1,b:2,c:3}</code></p> <p>Objects are collections of data organised into key/value pairs. They are contained within an opening and closing curly bracket (<code>{</code> and <code>}</code>). Keys and values are seperated by a colon (<code>:</code>), such as <code>key:value</code>.</p> <p>Each key/value pair record within the collection is seperated by a comma (<code>,</code>).</p>"},{"location":"types/data/#array","title":"Array","text":"<p><code>[1,2,3,4]</code></p> <p>Arrays are ordered collections of data, contained within an opening and closing square bracket (<code>[</code> and <code>]</code>). Each record withing the collection is seperated by a comma (<code>,</code>).</p> <p>Within the documentation, data listed as an Array will often have another data type listed in front of it, dictating the type of what the values within the array should be. For example, String Array is an array containing only Strings.</p> <p>Arrays may only contain a single type of data.</p>"},{"location":"types/data/#string","title":"String","text":"<p><code>\"Hello, World!\"</code></p> <p>Strings are a collection of characters, contained between two quotes (either <code>'</code> or <code>\"</code>).</p>"},{"location":"types/data/#json","title":"Json","text":"<p><code>'{\"text\":\"Hello, World!\"}'</code></p> <p>Json is a subset of String, of which the String is also a valid Raw JSON Text Component.</p> <p>It is used for formatting text.</p>"},{"location":"types/data/#numeric","title":"Numeric","text":"<p>The following types are numeric, and as such, can retrieved and stored into the scoreboard.</p> <p>Any reference to Numeric will accept any of the following types.</p>"},{"location":"types/data/#byte","title":"Byte","text":"<p><code>12b</code></p> <p>A number between -128 and 127. Has a suffix of <code>b</code>.</p>"},{"location":"types/data/#boolean","title":"Boolean","text":"<p><code>true</code></p> <p>Internally, a Boolean and a Byte are stored identically. However, a Boolean can only be between 0 and 1.</p> <p>Optionally, <code>true</code> and <code>false</code> can also be used in this type, for added readability.</p>"},{"location":"types/data/#short","title":"Short","text":"<p><code>1337s</code></p> <p>A number between -32,768 and 32,767. Has a suffix of <code>s</code>.</p>"},{"location":"types/data/#integer","title":"Integer","text":"<p><code>123456</code></p> <p>A number between -2,147,483,648 and 2,147,483,647. Has no suffix.</p>"},{"location":"types/data/#long","title":"Long","text":"<p><code>8489748397l</code></p> <p>A number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807. Has a suffix of <code>l</code>.</p>"},{"location":"types/data/#float","title":"Float","text":"<p><code>30.68f</code></p> <p>See NBT Format - Data Types. Has a suffix of <code>f</code>.</p>"},{"location":"types/data/#double","title":"Double","text":"<p><code>847.093D</code></p> <p>See NBT Format - Data Types. Has a suffix of <code>D</code>.</p>"},{"location":"types/data/#score","title":"Score","text":"<p>A score on a scoreboard objective. Same value range as Integer.</p>"},{"location":"types/utility/","title":"Utility Types","text":"<p>A utility is any datapack element Moxlib provides. The following is a list of utility types referenced in the Moxlib API.</p>"},{"location":"types/utility/#dimension","title":"Dimension","text":"<p><code>/execute in moxlib:state run tp ~ ~ ~</code></p> <p>Datapacks can define custom dimensions, which can have their own world generation configurations. Custom dimensions are useful for operations that require blocks to be placed in the world, without the chance of overriding a player-placed block.</p>"},{"location":"types/utility/#function","title":"Function","text":"<p><code>/function moxlib:api/verify</code></p> <p>Functions are text files, containing Minecraft commands, that can be called from the in-game console, as well as from other functions.</p> <p>All public Moxlib functions can be found under <code>/api</code>. Any functions outside of that subfolder are internal, and private. Calling a private function may result in undefined behaviour, and is not supported. Moxlib guarantees no consistant API for private functions.</p> <p>Functions can be called using the <code>/function</code> command, then providing the function's namespace.</p>"},{"location":"types/utility/#data-function","title":"Data Function","text":"<p>Data functions read and write from data storage. The path to their data storage will be the same as their namespace.</p> <p>Usually, the main input will be the <code>target</code> key, and the main output will be the <code>output</code> key.</p>"},{"location":"types/utility/#score-function","title":"Score Function","text":"<p>Score functions read and write from scoreboard objectives. The objective name will be the namespace of the function, but where colons (<code>:</code>), and forward slashes (<code>/</code>), are replaced with full stops (<code>.</code>).</p> <p>Example: <code>moxlib:api/math/random</code> has an objective at <code>moxlib.api.math.random</code>.</p> <p>Fake players used on the scoreboard objective will be prefixed by a dollar sign (<code>$</code>).</p>"},{"location":"types/utility/#entity-function","title":"Entity Function","text":"<p>Entity functions are supposed to be executed by an entity, such as an Armor Stand, or a Player.</p> <p>Use <code>/execute as &lt;selector&gt;</code> to run the function on the selected entities.</p>"},{"location":"types/utility/#predicate","title":"Predicate","text":"<p><code>/execute if predicate moxlib:api/player/is_sneaking</code></p> <p>Predicates are JSON files that describe a set of conditions that result in either a true or false state.</p> <p>All public Moxlib predicates can be found under <code>/api</code>. Any predicates outside of that subfolder are internal, and private. Private predicates may be subject to be modified, renamed or removed in any given release of Moxlib.</p>"},{"location":"types/utility/#player-predicate","title":"Player Predicate","text":"<p>Player predicates only work in the context of a player. They are used to check player-specific states or actions.</p>"},{"location":"types/utility/#entity-predicate","title":"Entity Predicate","text":"<p>Entity predicates only work in the context of an entity. They are used to check entity-specific states or actions.</p>"},{"location":"types/utility/#tags","title":"Tags","text":"<p>Tags are JSON files, that are used to group various elements of the game.</p>"},{"location":"types/utility/#function-tag","title":"Function Tag","text":"<p>The <code>/function</code> command can be used to run function tags. Any function listed in the given tag will be run upon the tag being run. This is useful for allowing custom functions to be run by specific entities, or under certain circumstances, without having to modify Moxlib itself.</p>"}]}